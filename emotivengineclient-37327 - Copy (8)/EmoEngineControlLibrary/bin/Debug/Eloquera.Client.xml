<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eloquera.Client</name>
    </assembly>
    <members>
        <member name="T:Eloquera.Client.EloqueraAttribute">
            <summary>
            Parent class for all Eloquera attributes.
            </summary>
        </member>
        <member name="T:Eloquera.Client.TableAttribute">
            <summary>
            The attribute marks type that all objects of the given type should be in a separate table.
            Reserved for future use.
            </summary>
        </member>
        <member name="M:Eloquera.Client.TableAttribute.#ctor">
            <summary>
            Initializes a new instance of the TableAttribute class.
            </summary>
        </member>
        <member name="M:Eloquera.Client.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TableAttribute class.
            </summary>
            <param name="TableName">The name of the table associated with the type.</param>
        </member>
        <member name="P:Eloquera.Client.TableAttribute.TableName">
            <summary>
            Indicates a table name associated with the type.
            </summary>
        </member>
        <member name="T:Eloquera.Client.TableRefAttribute">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="M:Eloquera.Client.TableRefAttribute.#ctor(System.String)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="P:Eloquera.Client.TableRefAttribute.TableName">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:Eloquera.Client.IndexAttribute">
            <summary>
            The attribute marks the field or property, whose value should be indexed.
            </summary>
            <example> Example of class definition
            <code>
            public class Movie
            {
             [Index(IsCaseSensitive = true, Culture = "en-US", MaxKeySize = 20)]
             public string Title {get; set;}
             
             [Index]
             public string StudioName {get; set;}
             
             [Index]
             public DateTime DateReleased {get; set; }
             
             public double Budget{get; set;}
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IndexAttribute.#ctor">
            <summary>
            Creates Index attribute with default values
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.IsCaseSensitive">
            <summary>
            In case of string indicates whether value should be treated as case sensitive
            Default value is true
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.IsUnique">
            <summary>
            Indicates whether value should be unique
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.Culture">
            <summary>
            A culture for the string
            Default value is CurrentCulture
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.MaxKeySize">
            <summary>
            Maximum size of the string that will be indexed.
            Entire strings will be stored in database, but will be indexed upto MaxKeySize length
            Default value is 128 characters.
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.IsCompoundIndex">
            <summary>
            Return true, if this field was added to compound index
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.Fields">
            <summary>
            Order of field in compound index
            </summary>
        </member>
        <member name="P:Eloquera.Client.IndexAttribute.IsSimple">
            <summary>
            Return true if field have simple index
            </summary>
        </member>
        <member name="T:Eloquera.Client.IgnoreAttribute">
            <summary>
            The attribute marks the field or property, whose value should not be stored in the Eloquera.
            </summary>
            <remarks>
            <c>IgnoreAttribute</c> should be applied only to fields and C# 3.0 <c>{ get; set; }</c> properties.
            Please note that marking the property with <c>IgnoreAttribute</c> won't result in ignoring all the fields 
            that are mentioned in its <c>get</c> methods (if the property doesn't have <c>get</c> method, <c>set</c> method is used).
            </remarks>
        </member>
        <member name="T:Eloquera.Client.IDAttribute">
            <summary>
            The attribute marks the field of type System.Int64 that should contain the unique (within the database) identifier for the object (UID).
            </summary>
            <remarks>
            Object's UID is available via DB.GetUid() method. This attribute allows to get the same value in the field within the object, 
            so the value of UID can be persisted between sessions.
            
            Please note that the value of the field marked with this attribute, should not be initialized.
            Changing the value of such a field can lead to data corruption, so never change the value of field.
            
            It is recommended to mark such a field as private read-only, and if the data from it is needed, provide a read-only property for accessing the field.
            </remarks>
        </member>
        <member name="T:Eloquera.LogicalTable.ClientTypeInfo">
            <summary>
            Defines the data required to create a physical table.
            
            This class is similar to the TypeParser class in many ways, nevertheless they are not interchangable.
            The purpose of this class is to create the lightweight object description without references to any other assemblies and/or libraries.
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.ClientTypeInfo.elementaryFields">
            <summary>
            Contains lengths of all stored elementary (a.k.a. primitive) typed fields, like int or double.
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.ClientTypeInfo.varFieldCount">
            <summary>
            Shows the number of stored variable-length (string) fields.
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.ClientTypeInfo.realStringFieldCount">
            <summary>
            This field indicates a number of true string fields (without stored properties).
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.ClientTypeInfo.Type">
            <summary>
            Contains the mask for the type.
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.ClientTypeInfo.Complexity">
            <summary>
            Shows a number of the complex types (classes) the current type refers to.
            Complex types include classes, arrays (except SZ-arrays of elementary types), 
            and interfaces (even if they contains references to the elementary types).
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.SerializedParameter">
            <summary>
            This class is used to pack all required classes in c/s communication.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.CommunicationUtils">
            <summary>
            Some usefull utilities to puck unpack data in client-server communication.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.EloquerServerReader">
            <summary>
            TODO: Simplify this overkill.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Communication.EloquerServerReader.Reset(System.Boolean,Eloquera.Client.Communication.CIOperation,Eloquera.Client.Communication.SerializedParameter[])">
            <summary>
            Set new operation and data to be serialized.
            </summary>
            <param name="isHandShake"></param>
            <param name="operation"></param>
            <param name="data"></param>
        </member>
        <member name="M:Eloquera.Client.Communication.EloquerServerReader.Get(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Repeatedly go thourgh Start Type1, Length1, Data1 ... TypeN, LengthN, DataN Finish cycle to fill data in buffer on demand.
            </summary>
            <param name="offset"></param>
            <param name="curCount"></param>
            <param name="maxCount"></param>
            <param name="buffer"></param>
            <param name="allCount"></param>
        </member>
        <member name="M:Eloquera.Client.Communication.EloquerServerReader.Process(System.Byte[],System.Int32,System.Int32,System.Int32,System.Byte[],Eloquera.Client.Communication.EloquerServerReader.State,System.Boolean,System.Int32@)">
            <summary>
            Process current state of data and add required size to buffer.
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
            <param name="curCount"></param>
            <param name="maxCount"></param>
            <param name="buffer"></param>
            <param name="nextState"></param>
            <param name="incrementOffset"></param>
            <param name="allCount"></param>
        </member>
        <member name="M:Eloquera.Client.Communication.EloquerServerReader.ProcessInit(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32@)">
            <summary>
            Initialization requires some additional work to be done.
            </summary>
            <param name="offset"></param>
            <param name="curCount"></param>
            <param name="maxCount"></param>
            <param name="buffer"></param>
            <param name="allCount"></param>
        </member>
        <member name="P:Eloquera.Client.Communication.EloquerServerReader.IsFinished">
            <summary>
            Check that we finished to process data
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.EloquerClientReader">
            <summary>
            TODO: And this overkill.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.BufferedSocket">
            <summary>
            This class performs as stream but buffers writes to socket droping only 8196 size data.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.ClientProxy">
            <summary>
            Proxy that provides required transparensy for DB in client-server comminication.
            </summary>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Insert(System.Guid,System.Int32,System.Int64[],System.Byte[][],System.Byte[][][],System.Int32[],System.Int32[],Eloquera.LogicalTable.ClientTypeInfo[],System.Int64[]@)">
            <summary>
            This method allows to add an object into the database.
            </summary>
            <param name="connectionId"></param>
            <param name="dbCode"></param>
            <param name="typeMask">The UID of the type, if known to the client. If specified, the typeName can be null.</param>
            <param name="fixedData">The serialized fixed data for the object.</param>
            <param name="varData">The serialized variable data for the object.</param>
            <param name="typeMap"></param>
            <param name="objectMap"></param>
            <param name="typeInfo">The additional information at the first call.</param>
            <param name="failedToUpdate">UID's of object that database failed to update.</param>
            <returns>A UID of the object inserted.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Delete(System.Guid,System.Int32,System.String,System.Int64,System.Int32)">
            <summary>
            This method allows to add an object into the database.
            </summary>
            <param name="connectionId"></param>
            <param name="dbCode"></param>
            <param name="typeName">The fully qualified name of the type.</param>
            <param name="objectUid">The UID of the object to be updated.</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow delete.</param>
            <returns>Array of deleted UIDs.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Get(System.Guid,System.Int32,System.String,System.Byte[][]@,System.Byte[][][]@)">
            <summary>
            Returns serialized data for all objects of the type typeName.
            </summary>
            <returns>Number of the records returned.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.GetRecords(System.Guid,System.Int32,System.Int64[],System.Int32,System.Byte[][]@,System.Byte[][][]@,System.String)">
            <summary>
            Returns the serialized data for the requested objects (by using their UIDs) and all referenced objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.ExecuteQuery(System.Guid,System.Int32,System.String,System.Byte[][],System.String,System.String,System.Int32,System.Boolean,System.Int64[]@,System.Byte[][]@,System.Byte[][][]@)">
            <summary>
            Returns all UIDs for objects meeting the conditions of the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.ExecuteQuery(System.Guid,System.Int32,System.String,System.Byte[][],System.String,System.String,System.Int32,System.String[]@,System.Int32@,System.Int64[]@,System.Byte[][]@,System.Byte[][][]@)">
            <summary>
            Performs query and returns all UIDs for objects meeting the conditions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.GetTypeNameForUid(System.Guid,System.Int32,System.Int64)">
            <summary>
            Returns a name of the type of the object represented by its UID.
            </summary>
            <returns>The full name of the type.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.CreateDatabase(System.Guid,System.String,System.String,Eloquera.Common.ConnectionOptions,System.Byte[])">
            <summary>
            Creates an empty database and registers it with Eloquera DB. Please note that this command DOES NOT open the database.
            If the physical path to the database is not specified, the server will create one in the folder designated in the server configuration.
            The usage of this function can be limited by the security settings.
            </summary>
            <param name="connectionId"></param>
            <param name="dbName">The database name.</param>
            <param name="physicalPath">An absolute path on the server. If null or empty, the Eloquera DB will use a default path for the database.</param>
            <param name="options">Indicates various options for the operation, like WriteThru, InMemory, DoPersist, IsSafeMode, etc.</param>
            <param name="typeDefinitions"></param>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.OpenDatabase(System.Guid,Eloquera.Common.ConnectionOptions,System.String)">
            <summary>
            Opens a database for the current connection.
            </summary>
            <param name="connectionId"></param>
            <param name="dbName">A database name as specified in CreateDatabase.</param>        
            <param name="options">Indicates various options for the operation, like WriteThru, InMemory, DoPersist, IsSafeMode, etc.</param>        
            <returns>An ID of the database created.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.OpenConnection(System.Byte[],System.Byte[])">
            <summary>
            Authenticates the current user and opens a new session on the server.
            </summary>
            <returns>ID of the connection established, or Guid.Empty if the connection has failed.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.GetProperties(System.Guid,System.Int32,Eloquera.Client.Property)">
            <summary>
            Gets a list properties (if the permissions allow) for the database. 
            Please note that these properties are solely the properties of the database, not related to any object stored in the database.
            </summary>
            <returns>List of requested values or an empty enumerator.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.CloseDb(System.Guid,System.Int32)">
            <summary>
            Closes the database with the specified code. The behaviour depends on the database mode: in desktop mode this command closes the database immediately, in CS - tbd.
            </summary>
            <param name="connectionId"></param>
            <param name="dbCode">The database internal code.</param>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Backup(System.Guid,System.Int32,System.Int32)">
            <summary>
            Backup
            </summary>
            <param name="connectionId"></param>
            <param name="curDbCode"></param>
            <param name="dbBackupCode">Code of the backup database</param>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Restore(System.Guid,System.Int32,System.Int32)">
            <summary>
            Restore
            </summary>
            <param name="connectionId"></param>
            <param name="curDbCode"></param>
            <param name="dbRestoreCode">Code of the backup database</param>
        </member>
        <member name="M:Eloquera.LogicalTable.IClientInterface.Compact(System.Guid,System.Int32)">
            <summary>
            Compacts the database.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.CIOperation">
            <summary>
            Operation code for method that database is invoking.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Communication.CIType">
            <summary>
            Type code for data.
            </summary>
        </member>
        <member name="T:Eloquera.Common.EloqueraConfig">
            <summary>
            The class provides a transparent access to all settings for the database, which are stored in the applications App.config file.
            
            The required data is stored in the configuration/Eloquera section of the Eloquera.config file.
            </summary>
        </member>
        <member name="T:Eloquera.Common.ConfigManager`1">
            <summary>
            This class provides a functionality to work with the configurations files.
            
            The configuration manager for the specific config class (containing the config fields) should be inherited from this class. 
            The config class (one with all fields and properties to be read from  the config file) should be inherited from AoteaConfig class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Eloquera.Common.ConfigManager`1.ReadConfigFile">
            <summary>
            The method reads the configuration file.
            
            Allows to update the app configuration without restarting.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Container">
            <summary>
            Represents a container for Dynamic objects within a database.
            </summary>
        </member>
        <member name="T:Eloquera.Client.IContainer">
            <summary>
            Represents a container for Dynamic objects within the database.
            </summary>
        </member>
        <member name="M:Eloquera.Client.IContainer.Store(Eloquera.Client.Dynamic)">
            <summary>
            The method to store or update an instance of the Dynamic class in the container.
            </summary>
            <param name="dynamicObject">An instance of the Dynamic class to be stored or updated in the container.</param>
            <returns>UID of the instance of the Dynamic class stored or updated in the container.</returns>
        </member>
        <member name="M:Eloquera.Client.IContainer.Store(System.Object)">
            <summary>
            The method to store or update an instance of the Dynamic class created from the native CLR object, in the container.
            </summary>
            <param name="obj">A native CLR object used as a template for an instance of the Dynamic class to be stored or updated in the container.</param>
            <returns>UID of the instance of the Dynamic class stored or updated in the container.</returns>
        </member>
        <member name="M:Eloquera.Client.IContainer.Delete(Eloquera.Client.Dynamic)">
            <summary>
            Deletes a given instance of the Dynamic class from the container.
            </summary>
            <param name="dynamicObject">An instance of the Dynamic class to be deleted from the container.</param>
        </member>
        <member name="M:Eloquera.Client.IContainer.Query``1">
            <summary>
            The infrastructure method for LINQ support. 
            </summary>
            <typeparam name="T">The type of object to be returned.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteQuery(System.String)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE Price > 25");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteQuery(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteQuery(System.String,System.Int32)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = 'Nice book'", 0);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteQuery(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <param name="parameters">Parameters for the query</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual", 0, param);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteScalar(System.String)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteScalar(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute.</param>
            <param name="parameters">Parameters for the query.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteScalar(System.String,System.Int32)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>        
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.IContainer.ExecuteScalar(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <param name="parameters">Parameters for the query.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="P:Eloquera.Client.IContainer.Name">
            <summary>
            The name of the container.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Container.Query``1">
            <summary>
            Returns a Query, on which we can perform LINQ query
            </summary>
            <typeparam name="Dynamic">Type that query performed on</typeparam>
            <remarks>
            <code>
            var movies = from m in db.Query&lt;Movie&gt;() where m.Title == "Joe" &amp;&amp; m.Year > 1950 orderby -m.Year select m;
            foreach (var m in movies)
            {
              ...
            }
            </code>
            </remarks>
            <returns>Returns a Query, on which he can perform LINQ query</returns>
        </member>
        <member name="M:Eloquera.Client.Container.Cast``1">
            <summary>
            Returns a Query, on which we can perform LINQ query
            </summary>
            <typeparam name="Dynamic">Type that query performed on</typeparam>
            <remarks>
            <code>
            var movies = from Movie m in db where m.Title == "Joe" orderby m.Year descending select m;
            foreach (var m in movies)
            {
              ...
            }
            </code>
            </remarks>
            <returns>Returns a Query, on which he can perform LINQ query</returns>
        </member>
        <member name="M:Eloquera.Client.Container.Store(Eloquera.Client.Dynamic)">
            <summary>
            Stores an instance of the Dynamic class in the container.
            </summary>
            <param name="dynamicObject">An instance of the Dynamic class to be stored in the container.</param>
            <returns>UID for the stored Dynamic object.</returns>
        </member>
        <member name="M:Eloquera.Client.Container.Store(System.Object)">
            <summary>
            The method to store or update an instance of the Dynamic class created from the native CLR object, in the container.
            </summary>
            <param name="obj">A native CLR object used as a template for an instance of the Dynamic class to be stored or updated in the container.</param>
            <returns>UID of the instance of the Dynamic class stored or updated in the container.</returns>
        </member>
        <member name="M:Eloquera.Client.Container.Delete(Eloquera.Client.Dynamic)">
            <summary>
            Deletes a given instance of the Dynamic class from the container. The instance must originate from the database in order to be deleted.
            </summary>
            <param name="dynamicObject">An instance of the Dynamic class to be deleted from the container.</param>
        </member>
        <member name="M:Eloquera.Client.Container.DeleteAll(Eloquera.Client.Dynamic)">
            <summary>
            Deletes a given instance of the Dynamic class from the container and all other objects referenced by the given object and its referenced objects.
            </summary>
            <param name="dynamicObject">An instance of the Dynamic class to be deleted from the container.</param>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteDelete(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Delete all objects meeting the conditions of the query from the container and all other objects referenced by the given object and its referenced objects.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow delete</param>
            <param name="param">Parameters for the query</param>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteQuery(System.String)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE Price > 25");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteQuery(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteQuery(System.String,System.Int32)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = 'Nice book'", 0);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteQuery(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <param name="parameters">Parameters for the query.</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual", 0, param);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteScalar(System.String)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteScalar(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute.</param>
            <param name="parameters">Parameters for the query.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteScalar(System.String,System.Int32)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute.</param>
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.Container.ExecuteScalar(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute.</param>
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <param name="parameters">Parameters for the query.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Dynamic book = (Dynamic)db.ExecuteScalar("SELECT TOP 1 Dynamic");
            </code>
            </example>
        </member>
        <member name="P:Eloquera.Client.Container.Name">
            <summary>
            Returns the container name.
            </summary>
        </member>
        <member name="T:Eloquera.Client.DB">
            <summary>
            This class provides the client access to the Eloquera server or to the Eloquera desktop database.
            </summary>
            <remarks>
            The usual scenario is opening the connection via <c cref="M:Eloquera.Client.DB.#ctor(System.String)">constructor</c> or <c cref="M:Eloquera.Client.DB.OpenConnection">OpenConnection</c> method, 
            and performing the necessary operations via <c cref="M:Eloquera.Client.DB.Store(System.Object)">Store()</c>, <c cref="M:Eloquera.Client.DB.Delete(System.Object)">Delete()</c>, and
            <c cref="M:Eloquera.Client.DB.Get``1">ExecuteQuery()</c> or via LINQ operations.
            
            Note. Do not call <c cref="M:Eloquera.Client.DB.Close">Close()</c> method in the client/server mode. This will change in the upcoming releases.
            </remarks>
            <summary>
            This part of DB class implementation is responsible for event handling.
            </summary>
        </member>
        <member name="F:Eloquera.Client.DB.currentDb">
            <summary>
            Current code of the database. By default, read-only access to System database.
            </summary>
        </member>
        <member name="F:Eloquera.Client.DB.objectStore">
            <summary>
            Maintains a mapping between objects and their UIDs.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.Query``1">
            <summary>
            Returns a Query, on which we can perform LINQ query
            </summary>
            <typeparam name="T">Type that query performed on</typeparam>
            <remarks>
            <code>
            var movies = from m in db.Query&lt;Movie&gt;() where m.Title == "Joe" &amp;&amp; m.Year > 1950 orderby -m.Year select m;
            foreach (var m in movies)
            {
              ...
            }
            </code>
            </remarks>
            <returns>Returns a Query, on which he can perform LINQ query</returns>
        </member>
        <member name="M:Eloquera.Client.DB.Cast``1">
            <summary>
            Returns a Query, on which we can perform LINQ query
            </summary>
            <typeparam name="T">Type that query performed on</typeparam>
            <remarks>
            <code>
            var movies = from Movie m in db where m.Title == "Joe" orderby m.Year descending select m;
            foreach (var m in movies)
            {
              ...
            }
            </code>
            </remarks>
            <returns>Returns a Query, on which he can perform LINQ query</returns>
        </member>
        <member name="M:Eloquera.Client.DB.Refresh``1(``0)">
            <summary>
            Method takes object that was previously retrieved or stored 
            in the database and updates it's values.
            Refresh is useful in a multi-client environment where object need to be refreshed 
            to accomodate any changes made by other clients.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="obj">Object to refresh</param>
            <returns>Refreshed object</returns>
        </member>
        <member name="M:Eloquera.Client.DB.ResetDbStateSimple">
            <summary>
            Resets the state of the DB object to be used even with no open connection.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.RecoverDatabase">
            <summary>
            Attempts to recover database, usually as response to the flag IsCorruptionSuspected
            </summary>
            <returns>True if recovery successful, false otherwise</returns>
        </member>
        <member name="M:Eloquera.Client.DB.ResetDbStaticState">
            <summary>
            Resets the database's static state.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.ResetDbStateComplete">
            <summary>
            Resets the state of the DB object after a new database connection is established.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.#ctor">
            <summary>
            Creates an empty database connection object. This object is not connected to any database.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.SetProvider(Eloquera.Client.QueryProvider)">
            <summary>
            Sets LINQ provider. Client will initialize provider with current DB reference, e.g. provider.SetDB(this);
            </summary>
            <param name="provider">Query provider that is responsible for query translation and execution.</param>
        </member>
        <member name="M:Eloquera.Client.DB.#ctor(System.String)">
            <summary>
            This constructor allows to create and establish a new connection to the server.
            
            User can specify a connection string with the server name, database name, etc.
            </summary>
            <param name="connectionString">The connection string contains all required parameters to establish a connection to the server.
            </param>
            <remarks>
            The connection string has the following form:
            
            server=ServerName;database=DatabaseName;user=UserName;password=UserPassword;options=SomeOptions
            
            where ServerName, DatabaseName, UserName, UserPassword represent a network name of the server with the Eloquera server, 
            the database name on that server, the user name and the password to authenticate on the server, respectively.
            The <code>options</code> parameter is not compulsory and is currently ignored.
            <code>
            DB db = new DB("server=(local);password=pwd;options=none;"); //local server
            DB db = new DB("server=localhost;user=sys;password=pwd;options=none;"); //remote server
            </code>
            </remarks>
        </member>
        <member name="M:Eloquera.Client.DB.Backup(System.String)">
            <summary>
            Makes backup of the database.
            Backup also allows to copy data across different versions of the database.
            </summary>
            <param name="name">Backup file name to make</param>
        </member>
        <member name="M:Eloquera.Client.DB.Restore(System.String)">
            <summary>
            Restores database from a backup file.
            Also allows to copy data from different version of the database.
            </summary>
            <param name="name">Backup file name to restore from</param>
        </member>
        <member name="M:Eloquera.Client.DB.OpenConnection">
            <summary>
            Establishes a connection to the server and publishes the interface to the server.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.OpenConnectionForOneSession(Eloquera.LogicalTable.Client.Server@,System.Guid@)">
            <summary>
            Establishes a connection to the server and publishes the interface to the server.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.Dispose">
            <summary>
            Shuts down the server
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.Close">
            <summary>
            Closes the database. The behaviour depends on the database mode: in desktop mode this command closes the database immediately.
            Currently has no effect in Client-Server environment, but may change in the future.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.SetupValues(System.String[])">
            <summary>
            Sets up the connection values for the database.
            </summary>
            <param name="parsedConnectionData"></param>
        </member>
        <member name="M:Eloquera.Client.DB.ParseOptions(System.String)">
            <summary>
            Parses the list of options specified by users.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Eloquera.Client.DB.Serialize(System.Object,System.Byte[][]@,System.Byte[][][]@,System.Object[]@,Eloquera.LogicalTable.ObjectMap@)">
            <summary>
            Creates a serialized form of an object provided by a user.
            
            Also serializes all connected (in terms of graphs) objects, and resolves circular references.
            </summary>
            <param name="obj">An object to serialize.</param>
            <param name="fixedRec">The collection of the fixed part of the serialization record.</param>
            <param name="varRec">The collection of the variable (string) part of the serialization record.</param>
            <param name="objectList">List of objects referenced by <c>obj</c> parameter.</param>
            <param name="objectMap">The positions of referenced objects (their UIDs) within serialized representation of <c>obj</c> parameter.</param>
            <returns>The list of types of each reference field of the serialized object and all its serialized children.</returns>
            <remarks>Note that the types returned by the method are not the types of the serialized objects, but the types of the fields that contain references to those objects.
            E.g., a field of type Book can contain the object of type ChildBook (which is descendant of Book). So, the return array will contain Book (as it is the type of the field), 
            and not ChildBook (unless it is contained by any of classes in the serialization graph).
            </remarks>
        </member>
        <member name="M:Eloquera.Client.DB.SerializeInternal(System.Object,System.Int64,Eloquera.Client.DB.SerializeHelper,System.Type)">
            <summary>
            Serializes an object, and creates a static or a dynamic map for all referenced objects.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <param name="uid">Uid to be assigned to the object (if provided > -1)</param>
            <param name="helper">A set of already serialized objects in case if any of referenced objects has been serialized earlier.</param>
            <param name="objType">A type of the expected object, in case if the object itself is null. 
            If object is null, we still need to collect its type information to send to the server.</param>
        </member>
        <member name="M:Eloquera.Client.DB.RegisterType(System.Type)">
            <summary>
            This method is used to create an empty object storage for a specific type. Useful in the database creation scripts.
            </summary>
            <param name="type">The type to create the storage for.</param>
            <returns>Currently returns 0, may be changed in the future.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.RegisterType(System.Type,System.Boolean)">
            <summary>
            Registers a new type, or update the existing type in the database.
            
            Eloquera does not update object definitions in the database when a new definition of a class 
            is added or updated via Store() method to prevent data damage.
            
            Using RegisterType() with updateType=true will allow not only update the class definition in the database,
            but will also transfer data from an old class storage into a new one.
            
            Please note that this method may take too long if the database contains significant amount of data of the affected type.
            As this methods locks the database, applying this method in the production environment may lead to a pause processing client requests.
            </summary>
            <param name="type">Type to be registered or updated.</param>
            <param name="removeType">Shows whether the type definitions should be updated if it exist in the database.</param>
            <returns>Currently returns 0, may change in the future.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.UnregisterType(System.Type)">
            <summary>
            Removes the type and all data of that type from the current database.
            </summary>
            <param name="type">Type to be removed.</param>
        </member>
        <member name="M:Eloquera.Client.DB.RenameType(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="oldName"></param>
            <param name="type"></param>
        </member>
        <member name="M:Eloquera.Client.DB.GetFullObjectTypeInfo(System.Type)">
            <summary>
            Returns the information about the requested type and all types that are referenced by its fields and properties.
            The information is collected from the type definition, and is not taken from the server.
            </summary>
            <param name="type">Type that needs to be investigated.</param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetObjectTypeInfo(System.Type,System.Collections.Generic.Dictionary{System.Type,Eloquera.LogicalTable.ClientTypeInfo},System.Boolean)">
            <summary>
            A recursive method for collection information about type and its referenced and parent types. 
            Walks through referenced types, and calls itself if the type has been added into the list of already processed types.
            </summary>
            <param name="type">Type to explore.</param>
            <param name="dict">Dictionary that will contain the type as a key, and its information as a value.</param>
            <param name="isRegType">Set true if this method was called after RegisterType</param>
        </member>
        <member name="M:Eloquera.Client.DB.IsTypeRegistered(System.Type)">
            <summary>
            Checks if a given type already registered within database
            </summary>
            <param name="type">The type to check</param>
            <returns>true, if the type is present in the current database.</returns>
            <example>
            <code>
            if (!db.IsTypeRegistered(typeof(Book)))
            {
               db.RegisterType(typeof(Book));
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.IsTypeRegistered(System.String)">
            <summary>
            Checks if a given type is already present within the current database.
            </summary>
            <param name="typeName">The type name to check</param>
            <returns>true, if the type is present in the current database.</returns>
            <example>
            <code>
            if (!db.IsTypeRegistered("Book"))
            {
               db.RegisterType(typeof(Book));
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.OpenDatabase(System.String)">
            <summary>
            Opens a database for the current connection.
            </summary>
            <param name="dbName">A database name as specified in CreateDatabase.</param>
            <returns>An ID of the database created.</returns>
            <example>
            <code>
            db = new DB("server=(local);user=sys;password=pwd;options=none;");
            db.OpenDatabase("Movies");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ReadPersistedDatabaseInfo">
            <summary>
            Reads all related persisted client-side metadata like ignored types from the database, if available.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.SavePersistedDatabaseInfo">
            <summary>
            Saves all updated client-side metadata like ignored types into the database.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.GetDbList">
            <summary>
            Returns a list of databases available on the current server.
            </summary>
            <returns>List of names of available databases.</returns>
            <example>
            <code>
            DB db = new DB("server=localhost;user=sys;password=pwd;options=none;");
            if (!(Array.IndexOf(db.GetDbList(), "Books") >= 0))
                 db.CreateDatabase("Books");
            db.OpenDatabase("Books");        
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.GetRegisteredTypeList">
            <summary>
            Returns all types that registered within the current database.
            </summary>
            <returns>The list of the registered type names.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetTypeInfo(System.String)">
            <summary>
            Get type information from the server (even if the type does not exist within the current application domain).
            </summary>
            <param name="typeName">The name of a type to get information for.</param>
            <returns>An instance of UserTypeInfo class, containing information about the requested type.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.InsertDynamicObjectInternal(Eloquera.Client.Dynamic,System.String)">
            <summary>
            Inserts a dynamic object (currently supports only a single object).
            </summary>
            <param name="dynObj"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.CollectTypeInfo(System.Type[],System.Collections.Generic.Dictionary{System.Type,System.Int32}@,System.Collections.Generic.Dictionary{System.Int32,System.Type}@)">
            <summary>
            Collects the list of types serialized by the serializer, and assigns them sequence numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.MapTypesToCodes(System.Collections.Generic.Dictionary{System.Type,System.Int32},System.Byte[][][],System.Object[],System.Type[])">
            <summary>
            
            </summary>
            <param name="typeMap"></param>
            <param name="varData">Used only for array data to set up array element type in the header.</param>
            <param name="objList">The object list returned by the serializer. The method goes through the list and stores the types in the dictionary (one entry per type).</param>
            <param name="typeList"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.MarkArrayTypeInVarData(System.Type,System.Byte[],System.Collections.Generic.Dictionary{System.Type,System.Int32},System.Int32,Eloquera.Client.TypeDefinitions)">
            <summary>
            Determines and encodes the array type in the variable field.
            </summary>
            <param name="realType"></param>
            <param name="varData"></param>
            <param name="typeMap"></param>
            <param name="looseTypePosition"></param>
            <param name="typeDefinitions"></param>
            <returns>Array type code according to the LoosePseudotypes</returns>
        </member>
        <member name="M:Eloquera.Client.DB.Store(System.Object)">
            <summary>
            This method stores an object in the database. 
            It the object is present in the database, it will be updated, otherwise it will be added to the database.
            </summary>
            <param name="obj">An object to store.</param>
            <returns>A UID of the object inserted. 0 if the object to store is null (it is not stored).
            UID is a unique identifier for an object within the database. 
            It can be used to identify the object within the database, for example, between page loads in the web applications.</returns>
            <example>
            Here is an example of storing a native object in the database.
            <code>
            db.Store(new Book() 
                 { 
                  Author = "Some author name", 
                  YearPublished = DateTime.Now, 
                  Edition = 3, 
                  Price = 25.99, 
                  Title = "Some good book", 
                  ISBN = "978-0-12-345678-9" 
                  });
            </code>
            
            An example below shows how you can insert a dynamic object:
            <code>
            Dynamic book = new Dynamic();
            book["Author"] = "Charles Dickens";
            book["Title"] = "Oliver Twist";
            book["Price"] = 12.95;
            
            db.Store(book);
            
            // This will update already added object.
            book["Printed"] = 2007;
            db.Store(book);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.Store(System.Int64,System.Object)">
            <summary>
            This method updates an object in the database. 
            Extreme care shall be taken to avoid mixing objects of different types
            </summary>
            <param name="uid">Target object uid</param>
            <param name="obj">An object to store.</param>
            <returns>A UID of the object updated. 0 if the object to store is null (it is not stored).
            UID is a unique identifier for an object within the database. 
            It can be used to identify the object within the database, for example, between page loads in the web applications.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.StorePartially(System.Object)">
            <summary>
            Methods updates the existing object's elementary (including DateTime and Guid) and string fields and properties only.
            </summary>
            <param name="obj">The object to stored or updated.</param>
            <returns>UID of the object stored or updated.</returns>
            <remarks>All changes to the object fields and properties made between querying the object and writing it back using this method,
            will be ignored by the database - only the elementary types (including DateTime and Guid) and strings will be preserved.
            
            If the object does not originate from the database (i.e., is a new object from the the database's point of view), 
            the object will be stored in whole, including all the child objects.
            </remarks>
        </member>
        <member name="M:Eloquera.Client.DB.StorePartially(System.Int64,System.Object)">
            <summary>
            Methods updates the existing object's elementary (including DateTime and Guid) and string fields and properties only.
            </summary>
            <param name="uid">UID of the object to be updated.</param>
            <param name="obj">The object to stored or updated.</param>
            <returns>UID of the object stored or updated.</returns>
            <remarks>All changes to the object fields and properties made between querying the object and writing it back using this method,
            will be ignored by the database - only the elementary types (including DateTime and Guid) and strings will be preserved.
            
            If the object does not originate from the database (i.e., is a new object from the the database's point of view), 
            the object will be stored in whole, including all the child objects.
            </remarks>
        </member>
        <member name="M:Eloquera.Client.DB.Delete(System.Object)">
            <summary>
            Deletes an object that was retrieved from the database.
            </summary>
            <param name="obj">An object to delete</param>
            <example>
            <code>
            IEnumerable listOfMovies = db.ExecuteQuery("SELECT Movie WHERE Genre >= 5");
            foreach (Movie mov in listOfMovies) 
            {
                db.Delete(mov);
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.DeleteAll(System.Object)">
            <summary>
            Deletes the object and its dependent objects are involved.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Eloquera.Client.DB.Delete(System.Object,System.Int32)">
            <summary>
            Deletes the object.
            </summary>
            <param name="obj"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Eloquera.Client.DB.GetUid(System.Object)">
            <summary>
            Returns a UID for the object that was retrieved from the database
            </summary>
            <param name="obj">An object to return UID for</param>
            <returns>UID of the object</returns>
        </member>
        <member name="M:Eloquera.Client.DB.CreateDatabase(System.String)">
            <summary>
            Creates an empty database and registers it with Eloquera DB.
            </summary>
            <param name="dbName">Database name</param>
            <remarks>
            Please note that this command DOES NOT open the database.
            If the physical path to the database is not specified, the server will create one in the folder designated in the server configuration.
            The usage of this function can be limited by the security settings.
            </remarks>
            <example>
            <code>
            db = new DB("server=localhost;user=sys;password=pwd;options=none;");
            db.CreateDatabase("Movies");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.DeleteDatabase(System.String,System.Boolean)">
            <summary>
            Deletes the database and removes the physical file associated with the database.
            </summary>
            <param name="dbName">The name of the database to be deleted.</param>
            <param name="forceClose">Shows whether all connections to the database must be reset.
            </param>
            <remarks>
            Setting forceClose parameter to true will invalidate all open connections to the database.
            
            The method will fail if the database has open connections made to it, and the forceClose parameter is set to false.
            
            Please note that this method will destroy data irrevocably.
            </remarks>
        </member>
        <member name="M:Eloquera.Client.DB.Get``1">
            <summary>
            Returns all objects of the specified type T (shallow Get).
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <returns>The collection of the objects of the type T stored in the database.</returns>
            <example>
            <code>
            IEnumerable allBooks = db.Get&lt;Book&gt;();
            foreach(Book book in allBooks)
            {
              ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.RegisterOrCheckWithObjectStore``1(System.Byte[],System.Byte[][])">
            <summary>
            Performs shallow deserialization and registers the object in the weak storage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fixedData"></param>
            <param name="varData"></param>
            <returns></returns>
        </member>
        <member name="F:Eloquera.Client.DB.dataFilesPath">
            <summary>
            Indicates the location to look for the database files.
            </summary>
        </member>
        <member name="F:Eloquera.Client.DB.noWeakStorage">
            <summary>
            Use stateless mode - no weak storage is created, only objects with UIDs specified can be updated.
            </summary>
        </member>
        <member name="F:Eloquera.Client.DB.safeMode">
            <summary>
            Indicates whether the server should perform only basic operations when opening a database.
            No type information is loaded.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.CreateParameters">
            <summary>
            Creates a new set of query parameters.
            </summary>
            <returns>A new set of parameters.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteQuery(System.String)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE Price > 25");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteQuery(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual");
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteQuery(System.String,System.Int32)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = 'Nice book'", 0);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteQuery(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns all objects meeting the conditions of the query. 
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <param name="parameters">Parameters for the query</param>
            <returns>List of objects that met conditions of the query.</returns>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteQuery("SELECT TOP 100 Book WHERE title = @manual", 0, param);
            foreach(Book book in res)
            {
             ...
            }
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteSimpleQuery(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Executes all queries other than JOIN
            </summary>
            <param name="query"></param>
            <param name="depth"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteDelete(System.String)">
            <summary>
            Delete all objects meeting the conditions of the query. 
            Data is deleted by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteDelete("DELETE TOP 100 Book WHERE Price > 25");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteDelete(System.String,Eloquera.Client.Parameters)">
            <summary>
            Delete all objects meeting the conditions of the query. 
            Data is deleted by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteDelete("SELECT TOP 100 Book WHERE title = @manual");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteDelete(System.String,System.Int32)">
            <summary>
            Delete all objects meeting the conditions of the query. 
            Data is deleted by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow delete</param>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            IEnumerable res = db.ExecuteDelete("Delete TOP 100 Book WHERE title = 'Nice book'", 0);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteDelete(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Delete all objects meeting the conditions of the query.
            Data is deleted by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow delete</param>
            <param name="parameters">Parameters for the query</param>
            <remarks>
            For the query syntax, please refer to the 'Eloquera SQL Reference' in the documentation 
            or on <a href="http://www.eloquera.com/reference">the web site</a>.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            IEnumerable res = db.ExecuteDelete("DELETE TOP 100 Book WHERE title = @manual", 0, param);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteSimpleDelete(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Executes all queries for delete
            </summary>
            <param name="query"></param>
            <param name="depth"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetAllRefUids(Eloquera.Common.LogicalTable.ObjectAccessor,System.Byte[])">
            <summary>
            Extracts all objects' UIDs referenced by the given object (represented with its fixed serialized part).
            </summary>
            <param name="oa">ObjectAccessor corresponding to the object's type.</param>
            <param name="fixedRec">The fixed part of object's serialized representation.</param>
            <returns>Array of UIDs representing objects referenced by the given object.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteJoinQuery(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Executes JOIN queries
            </summary>
            <param name="query"></param>
            <param name="depth"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetRecords(System.Int64[],System.Int32,System.String)">
            <summary>
            Retrieves records for the given UIDs and stores them in SerializedObjectDataSet
            </summary>
            <param name="uids"></param>
            <param name="depth"></param>
            <param name="containerName"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteScalar(System.String,System.Int32)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means the shallow read.</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Book book = (Book)db.ExecuteScalar("SELECT Book WHERE title = @manual", 0);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteScalar(System.String,System.Int32,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="depth">Activation depth of the object(s): value 0 means shallow read</param>
            <param name="parameters">Parameters for the query</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            Book book = (Book)db.ExecuteScalar("SELECT Book WHERE title = @manual", 0, param);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteScalar(System.String,Eloquera.Client.Parameters)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <param name="parameters">Parameters for the query</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Parameters param = db.CreateParameters();
            param["manual"] = "Operation Manual";
            Book book = (Book)db.ExecuteScalar("SELECT Book WHERE title = @manual", param);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.ExecuteScalar(System.String)">
            <summary>
            Returns first object from the query result.
            Data is retrieved by executing SQL statements. 
            For information on the SQL syntax supported, see the SQL document "Eloquera SQL Reference", 
            Throws an exception if the SQL statement fails to execute.
            </summary>
            <param name="query">Query to execute</param>
            <returns>The object corresponding to the requested query.</returns>
            <remarks>
             If the query returns multiple objects, only the first one will be returned.
             If the query results in the empty set, <c>null</c> is returned.
            </remarks>
            <example>
            <code>
            Book book = (Book)db.ExecuteScalar("SELECT TOP 1 Book");
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.DB.Compact">
            <summary>
            Cleans removed entries from the database.
            Compact is a system operation, and should not be used in the CRUD cycle.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.GetEnvelope``1">
            <summary>
            For high-performance database operations an envelopes can be used.
            Scans a database and returns an envelope (wrapper) for each object of the given type (shallow copy).
            </summary>
            <typeparam name="T">Type in the database to scan</typeparam>
            <returns>An envelope for each object of given type</returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetProperty(Eloquera.Client.Property)">
            <summary>
            Gets a list properties (if the permissions allow) for the database. 
            Please note that these properties are solely the properties of the database, not related to any object stored in the database.
            </summary>
            <param name="property">The property name, e.g., DatabaseList or CreationDate.</param>
            <returns>List of requested values or an empty enumerator.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.SerializeSimple(System.Object,System.Byte[]@,System.Byte[][]@)">
            <summary>
            Serializes simple objects with no object fields. Used in Database for Meta and Dynamic tables handling.
            </summary>
            <param name="obj"></param>
            <param name="fixedRec"></param>
            <param name="varRec"></param>
        </member>
        <member name="M:Eloquera.Client.DB.CreateUser(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Not implemented
            </summary>
            <param name="userName">Name of the user</param>
            <param name="userPassword">Access password</param>
            <param name="userComment">Comments associated with a user</param>
            <param name="isEnabled">Whether user is enabled</param>
            <returns>Returns a new user used to access server</returns>
        </member>
        <member name="M:Eloquera.Client.DB.GenerateSignature">
            <summary>
            Generate unique signature for client connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetStoredProcedureClass``1">
            <summary>
            Get proxy object to invoke stored procedure.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DB.GetStoredProcedures">
            <summary>
            Returns the list of all existing procedures within the server.
            </summary>
            <returns>Names of all existing procedures within the server.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.RegisterServerEvent(Eloquera.Client.ServerEventType,Eloquera.Client.EloqueraEventHandler)">
            <summary>
            Registers an event from the client, and notifies the server about client's interest in events.
            </summary>
            <param name="eventType">What event type you would like to register.</param>
            <param name="value">The event handler for the specified event.</param>
        </member>
        <member name="M:Eloquera.Client.DB.UnregisterServerEvent(Eloquera.Client.ServerEventType,Eloquera.Client.EloqueraEventHandler)">
            <summary>
            Unregister an event from the list of all events.
            </summary>
            <param name="eventType"></param>
            <param name="value"></param>
        </member>
        <member name="P:Eloquera.Client.DB.RefreshMode">
            <summary>
            Indicates the current multiple updates conflict resolution strategy on the client.</summary>
            <remarks>
            As objects physically exist on the client side on multiple machines, 
            multiple clients may modify the same object independently.
            After updating the database, there raises a discrepancy between the object representation in the database, 
            and the real object on the client that is not aware about the update.
            
            This problem should be resolved via transactional isolation, but for the time being the flags below should
            help in solving such problems.
            
            The mode can be changed programmatically between calls.
            </remarks>
        </member>
        <member name="P:Eloquera.Client.DB.UpdateMode">
            <summary>
            Represents the update mode for the object for the database connection.
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.ValidateLocalTypes">
            <summary>
            An indicate whether, prior to sending object to the server, type of the object shall be validated
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.ConnectionTimeout">
            <summary>
            Sets the connection timeout in seconds. Value of 0 denotes an infinite timeout, which is the default value.
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.IsCorruptionSuspected">
            <summary>
            Demonstrates whether database corruption is suspected, primarly due to unexpected shutdown
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.IsOpen">
            <summary>
            Shows if database is open
            </summary>
            <returns>True if database is open, false otherwise</returns>
        </member>
        <member name="P:Eloquera.Client.DB.Configuration">
            <summary>
            Provides access to the database configuration in the desktop mode.
            Changes are valid only for the current session.
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.UID">
            <summary>
            The property represents a syntactic entry to allow LINQ queries with use of object $ID.
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.Containers">
            <summary>
            Provides methods for accessing and manipulating the Dynamic object containers in the database.
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.TypeRules">
            <summary>
            Starts a new set of the type definition or modification rules.
            </summary>
        </member>
        <member name="T:Eloquera.Client.DB.SerializeHelper">
            <summary>
            Stores the list of objects along with thier serialized representation.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.SerializeHelper.Add(System.Object,System.Type,System.Byte[],System.Byte[][],System.Object[])">
            <summary>
            Adds an object and associates its serialized data with it. 
            Also determines if an object is already present in the list.
            </summary>
            <param name="obj">An object whose serialized data is to be added to the list.</param>
            <param name="type">Object's type.</param>
            <param name="fixedData">Serialized form of object's fixed data.</param>
            <param name="varData">Serialized form of object's variable data.</param>
            <param name="objRef">List of embedded objects referenced by the object.</param>
            <returns>Object's position within the list, or -1 if the object already is present in the list.</returns>
        </member>
        <member name="M:Eloquera.Client.DB.SerializeHelper.AddStaticMapping(System.Object,System.Int64,System.Int32,System.Int32)">
            <summary>
            Resolves a child object reference within a parent object. If the resolution on the client is impossible, 
            adds an object reference into a reference static map for later resolution on the server, when UIDs of the child objects are known.
            
            Note that if the UID of the child object is known on the server, it is written into the parent object fixed data section, 
            and no static map entry is added.
            </summary>
            <param name="childObj">Child object (referenced object), which appears in the parent object at the offset specified in fieldOffset parameter.</param>
            <param name="uid">Child object's UID if known. If unknown the value of -1 is to be sent into the method.</param>
            <param name="parentPosition">Should specify the position of the parent object (container object) within current helper object (within the list of serialized objects).</param>
            <param name="fieldOffset">The offset within parent object's fixed record, at which the UID of child object is to be inserted.</param>
        </member>
        <member name="F:Eloquera.Client.DB.SerializeHelper.helper">
            <summary>
            Stores the position (offset) of each object's serialized data within the respective arrays.
            </summary>
        </member>
        <member name="T:Eloquera.Client.DB.Envelope`1">
            <summary>
            A wrapper for the object for high-performance database operations.
            </summary>
            <typeparam name="T">The type of the object to work with.</typeparam>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope`1.#ctor(`0)">
            <summary>
            Creates a new envelopes and initializes to the given object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope`1.Insert(Eloquera.Client.DB)">
            <summary>
            Inserts wrapped object into given database
            </summary>
            <param name="db">Database to insert into.</param>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope`1.Insert(Eloquera.Client.DB,`0)">
            <summary>
            Inserts an object into a given database.
            </summary>
            <param name="db">Database to insert into</param>
            <param name="obj">Object to insert</param>
            <returns>A wrapper for the object </returns>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope`1.GetEnvelope(Eloquera.Client.DB,System.Int64)">
            <summary>
            Gets an object in an envolope.
            </summary>
            <param name="db">Database containing the object.</param>
            <param name="uid">Object UID.</param>
            <returns>Wrapped objects that meet the conditions of the query</returns>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope`1.Get(Eloquera.Client.DB)">
            <summary>
            Returns all objects of type T for the given database
            </summary>
            <param name="db">Database to query</param>
            <returns>All objects of type T for the given database</returns>
        </member>
        <member name="P:Eloquera.Client.DB.Envelope`1.Uid">
            <summary>
            UID of wrapped object
            </summary>
        </member>
        <member name="P:Eloquera.Client.DB.Envelope`1.Value">
            <summary>
            Wrapped object
            </summary>
        </member>
        <member name="T:Eloquera.Client.DB.Envelope">
            <summary>
            Generic wrapper for the object for high-performance database operations.
            </summary>
        </member>
        <member name="M:Eloquera.Client.DB.Envelope.#ctor(System.Object)">
            <summary>
            Creates a generic Envelope object for any artibrary type.
            </summary>
            <param name="obj">The object to put into the envelope.</param>
        </member>
        <member name="T:Eloquera.Client.ObjectUpdateMode">
            <summary>
            Represents the update mode for the object for the database connection.
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectUpdateMode.AlwaysUpdateChildren">
            <summary>
            Indicates that Dynamic fields inside Dynamic object shall be always updated on store
            This is default value
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectUpdateMode.UpdateParentOnly">
            <summary>
            Do not update existing Dynamic fields inside Dynamic if they exist
            </summary>
        </member>
        <member name="T:Eloquera.Client.ObjectRefreshMode">
            <summary>
            Represents the multiple updates conflict resolution strategy on the client.</summary>
            <remarks>
            As objects physically exist on the client side, multiple clients may modify the same object independently.
            After updating the database, there raises a discrepancy between object 'image' in the database, 
            and the real object on the client that is not aware about the update.
            
            This problem should be resolved via transactional isolation, but for the time being the flags below should
            help in solving such problems.
            
            The mode can be changed programmatically between calls.
            </remarks>
        </member>
        <member name="F:Eloquera.Client.ObjectRefreshMode.AlwaysUseLocalValues">
            <summary>
            This mode always retains the objects in their original state even if they were modified on the server.
            Objects will only save the changes performed locally.
            This mode is useful for the "distributed" change of many entangled objects, or for "writers" (especially, "sole writers".)
            
            NOTE. Updating the database with the objects in this mode will overwrite all changes previously made by any other client.
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectRefreshMode.AlwaysReturnUpdatedValues">
            <summary>
            This mode uses the most recent version of the data returned by quries.
            Useful for "readers" that need the latest data.
            NOTE. Local changes to database objects will be wiped after re-running queries.
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectRefreshMode.TransparentRefresh">
            <summary>
            Refresh updated objects in the background as they get modified on the server.
            Not supported at the moment.
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectRefreshMode.TransparentUpdateOnly">
            <summary>
            Writes all changes to the database objects directly to the database, without the need to call Update.
            Not supported.
            </summary>
        </member>
        <member name="F:Eloquera.Client.ObjectRefreshMode.UpdateAfterResolve">
            <summary>
            If an object has been on the server, and its local value does not match the one on the server,
            the special delegate is called to resolve the conflict.
            To be implemented soon.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Containers">
            <summary>
            Provides access to Dynamic object containers in the database.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Containers.CreateContainer(System.String)">
            <summary>
            Creates a new container for Dynamic objects in the database.
            </summary>
            <param name="containerName"></param>
        </member>
        <member name="M:Eloquera.Client.Containers.OpenContainer(System.String)">
            <summary>
            Opens the container with the specified name from the database.
            </summary>
            <param name="containerName">The container name to open.</param>
            <returns>The container with the specified name.</returns>
        </member>
        <member name="M:Eloquera.Client.Containers.DeleteContainer(System.String)">
            <summary>
            Deletes the container from the database.
            </summary>
            <param name="containerName">The name of the container to be deleted.</param>
        </member>
        <member name="M:Eloquera.Client.Containers.OpenContainer">
            <summary>
            Opens a default container. The result is the same as calling OpenContainer(null).
            </summary>
            <returns>Container object opened in the current database.</returns>
        </member>
        <member name="M:Eloquera.Client.Containers.ListContainers">
            <summary>
            Returns the list of all existing containers within the database.
            </summary>
            <returns>Names of all existing containers within the database.</returns>
        </member>
        <member name="P:Eloquera.Client.Containers.Item(System.String)">
            <summary>
            Returns the container with the specified name from the database.
            </summary>
            <param name="containerName">The name of the container to be opened.</param>
            <returns>The container with the requested name.</returns>
        </member>
        <member name="T:Eloquera.Client.Dynamic">
            <summary>
            The class represents the dynamic object functionality in the Eloquera database.
            </summary>
        </member>
        <member name="F:Eloquera.Client.Dynamic.DynamicThisMarker">
            <summary>
            A marker for properties representing the object itself.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Dynamic.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            The infrastructure method. The method for retrieving a property of Dynamic object in DynamicObject style.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            The infrastructure method. The method for setting a property of Dynamic object in DynamicObject style.
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.#ctor">
            <summary>
            Initializes a new instance of the Dynamic class that is empty.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Dynamic.#ctor(System.Object)">
            <summary>
            Creates a new instance of the Dynamic object, and initializes it with data from the specified object.
            </summary>
            <param name="templateObject">An object whose data will be used to assign key/value pair in the dynamic object.</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.FromNative(System.Object)">
            <summary>
            Updates the dynamic object using data from the template object. 
            All field and property values are copied into the dynamic
            </summary>
            <remarks>
            All field and property values are copied into the dynamic object updating existing keys/values if any.
            Key/Values that are not named as fields or properties of the template object, remain unchanged.
            Null values from the template object do not remove namesake key/values from the dynamic object.
            </remarks>
            <param name="templateObject">An object whose data is copied into the dynamic object.</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.ToNative``1">
            <summary>
            Creates an object of the specified type, initialized with data from the dynamic object.
            </summary>
            <typeparam name="T">The type of an object to be created.</typeparam>
            <returns>An object of the specified type, with field values set according to the dynamic object's data.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.ToNative``1(``0)">
            <summary>
            Updates the provided object with data from the dynamic object.
            </summary>
            <typeparam name="T">The type of an object to be updated.</typeparam>
            <param name="updatableObject">The object to be updated using data from the dynamic object.</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.SetItem(System.String,Eloquera.Client.Value,System.Boolean,System.Int32)">
            <summary>
            Sets a new key/value pair for the current dynamic object.
            </summary>
            <param name="propertyName">Key name.</param>
            <param name="value">Value to set for the key.</param>
            <param name="throwOnBadName">Shows whether the method should throw exceptions on bad names or simply ignore them and do nothing.</param>
            <param name="indexPosition">Shows an index position for array properties (-1 indicates no-array property).</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Guid}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.DateTime}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Boolean}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Int64}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Decimal}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Double}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.String">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.op_Implicit(Eloquera.Client.Dynamic)~System.Nullable{System.Int32}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.Clone">
            <summary>
            Clones an existing dynamic object. The clone will appear as a new dynamic object, and will be stored and updated separately from its original in the database.
            </summary>
            <returns>A new instance of dynamic object having the same content.</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.RegisterCustomHandler(System.Type,Eloquera.Client.IDynamicHandler)">
            <summary>
            Registers a custom handler for a specific type to convert an instance of the type into a dynamic object, and back.
            </summary>
            <param name="type">A specific type to be processed by a handler. The rule is not applied to the descendants of the type.</param>
            <param name="dynamicHandler">An instance of the class implementing the IDynamicHandler interface.</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.RemoveItem(System.String)">
            <summary>
            Removes a key/value pair from the dynamic object.
            </summary>
            <param name="propertyName">The key of the key/value pair to be deleted.</param>
        </member>
        <member name="M:Eloquera.Client.Dynamic.ContainsKey(System.String)">
            <summary>
            Returns true if the given key is present in the current object, false otherwise
            </summary>
            <param name="key">Key to search</param>
            <returns>true if key is present, false otherwise</returns>
        </member>
        <member name="M:Eloquera.Client.Dynamic.Add(System.String,System.Object)">
            <summary>
            Adds a new property to the Dynamic object.
            </summary>
            <param name="key">A name of the property.</param>
            <param name="value">The value for the property.</param>
            <remarks>Throws an InvalidOperationException exception upon adding a property that already exists in the Dynamic object.</remarks>
        </member>
        <member name="P:Eloquera.Client.Dynamic.Uid">
            <summary>
            An identifier uniquely determining the dynamic object within a database.
            Uid is correct only for dynamic objects added into and/or retrieved from the database.
            Do not assign this value with any number except the UID of a real Dynamic object in the database to avoid data loss.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Dynamic.Item(System.String)">
            <summary>
            Accesses the keys and values within a dynamic object.
            </summary>
            <param name="propertyName">Key name. Can be an empty string (but not null), although such fields are not not searchable.</param>
            <returns>A value associated with the key, or null if the key does not exist.</returns>
        </member>
        <member name="T:Eloquera.Client.Dynamic.ObjectItem">
            <summary>
            Class contains field name-value-type definition
            </summary>
        </member>
        <member name="M:Eloquera.Client.Dynamic.ObjectItem.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ObjectItem class.
            </summary>
            <param name="key">A key name for the key-value pair.</param>
            <param name="obj">A value for the key-value pair.</param>
        </member>
        <member name="P:Eloquera.Client.Dynamic.ObjectItem.Key">
            <summary>
            The name of the key for the item.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Dynamic.ObjectItem.Type">
            <summary>
            Type of the item.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Dynamic.ObjectItem.IsArray">
            <summary>
            Indicates whether the item contains an array object.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Dynamic.ObjectItem.Value">
            <summary>
            The value stored in the item.
            </summary>
        </member>
        <member name="T:Eloquera.Client.IDynamicHandler">
            <summary>
            Implementing this interface allows providing a custom conversion mechanism for native objects into dynamic objects, and vice versa.
            </summary>
        </member>
        <member name="M:Eloquera.Client.IDynamicHandler.ToNative(Eloquera.Client.Dynamic)">
            <summary>
            The custom method for converting an instance of Dynamic class into the native CLR object.
            </summary>
            <param name="dynamicObject">An instance of Dynamic class to be converted into the native CLR object.</param>
            <returns>The native CLR object generated from an instance of Dynamic class.</returns>
        </member>
        <member name="M:Eloquera.Client.IDynamicHandler.ToDynamic(System.Object,Eloquera.Client.Dynamic)">
            <summary>
             The custom method for converting a native CLR object into an instance of Dynamic class.
            </summary>
            <param name="obj">A native CLR object to be converted into an instance of Dynamic class.</param>
            <param name="dynamicObject">An instance of Dynamic class created from the given native CLR object.</param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectAccessor.#ctor(System.Type,Eloquera.Client.TypeDefinitions)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="typeDefinitions"></param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectAccessor.CreateDynamic(System.Object,Eloquera.Client.Dynamic,System.Collections.Generic.Dictionary{System.Object,Eloquera.Client.Dynamic})">
            <summary>
            
            </summary>
            <param name="templateObject"></param>
            <param name="dyn"></param>
            <param name="objects"></param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectAccessor.CreateToDynamic(System.Type,Eloquera.Common.LogicalTable.TypeParser)">
            <summary>
            Creates a dynamic method converting a native object into a dynamic object.
            </summary>
            <param name="type"></param>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectAccessor.CreateNative(Eloquera.Client.Dynamic,System.Type)">
            <summary>
            Creates a native object of the request type from the template dynamic object.
            </summary>
            <param name="dynamicObject"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectAccessor.CreateNative(Eloquera.Client.Dynamic,System.Type,System.Collections.Generic.Dictionary{System.Int64,System.Object})">
            <summary>
            Creates a native object of the request type from the template dynamic object. Also restores all referenced objects.
            </summary>
            <param name="dynamicObject"></param>
            <param name="type"></param>
            <param name="objList"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DynamicMappedList.Add(Eloquera.Client.Dynamic)">
            <summary>
            Adds a new uninitialized Dynamic object to the list, and assigns it a new virtual UID.
            </summary>
            <param name="dyn"></param>
        </member>
        <member name="M:Eloquera.Client.DynamicMappedList.Add(Eloquera.Client.Dynamic,System.Int32,Eloquera.Client.Dynamic)">
            <summary>
            Adds an entry to the object map.
            </summary>
            <param name="dynamicObject"></param>
            <param name="offset"></param>
            <param name="referencedDynamic"></param>
        </member>
        <member name="M:Eloquera.Client.DynamicMappedList.Add(Eloquera.Client.Dynamic,System.Byte[])">
            <summary>
            Adds a serialized form of a dynamic object associated with the dynamic object itself.
            </summary>
            <param name="dynObj"></param>
            <param name="data"></param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.Wrap(Eloquera.Client.Dynamic,System.Byte[][]@,System.Byte[][][]@,Eloquera.LogicalTable.ObjectMap@,System.Collections.Generic.IList{Eloquera.Client.Dynamic}@,Eloquera.Client.ObjectUpdateMode)">
            <summary>
            Serializes a given dynamic object and also all associated dynamic objects.
            </summary>
            <param name="dynObj">A dynamic object to serialize.</param>
            <param name="fixedData"></param>
            <param name="varData">Serialized form for a given dynamic object and all associated (i.e., referenced) dynamic objects.</param>
            <param name="map">Object map showing how to assign UIDs of the referenced dynamic objects within the referencing dynamic objects.</param>
            <param name="allDynamics">Gets a list of all dynamic objects parsed by the method.</param>
            <param name="updateMode">Indicates whether children shall be updated</param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.Wrap(Eloquera.Client.Dynamic,System.Byte[]@,System.Collections.Generic.IList{Eloquera.Client.Dynamic}@,System.Collections.Generic.IList{System.Int32}@,Eloquera.Client.ObjectUpdateMode)">
            <summary>
            Serializes a given dynamic object only. All referenced dynamic objects are listed separately.
            </summary>
            <param name="dynObj">A dynamic object to serialize.</param>
            <param name="serializedDyn">A serialized form for the given dynamic object.</param>
            <param name="childDyn">All dynamic objects referenced by the given dynamic object.</param>
            <param name="positions">Positions of the UIDs within serialized data for referenced dynamic objects with no UID assigned.
            Those having UIDs are not included into the list, although are serialized.
            <param name="updateMode">Indicates whether children shall be updated</param>
            </param>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.GetReferencedUids(System.Byte[])">
            <summary>
            Returns all offsets to the referenced dynamic objects from within the serialized dynamic object.
            </summary>
            <param name="serializedDynamicObject"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.DecorateName(System.String)">
            <summary>
            Removes spaces and replaces them with \s character.
            </summary>
            <param name="name">A string to decorate.</param>
            <returns>A decorated string.</returns>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.Serialize(Eloquera.Client.Dynamic)">
            <summary>
            Serialize Dynamic object to byte[]
            </summary>
            <param name="do"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.DynamicObjectWrapper.DeSerialize(System.Byte[])">
            <summary>
            Deserialize Dynamic object from byte[] (Dynamic UID is set to -1)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:Eloquera.Client.DynamicObjectWrapper.dataStream">
            <summary>
            The internal structure of this array is the following:
               key1Length, key1, dataType1,
               Value1Length, Value1,
               ....
               keyNLength, keyN, dataTypeN,
               Value1Length, ValueN
            </summary>
        </member>
        <member name="T:Eloquera.Client.Value">
            <summary>
            The infrastructure class for supporting Dynamic.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Value.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the Value class.
            </summary>
            <param name="v"></param>
            <param name="isArray"></param>
        </member>
        <member name="M:Eloquera.Client.Value.ToObject">
            <summary>
            Returns the value of the dynamic property as an object.
            </summary>
            <returns>The value of the property for any type except Dynamic; if the value is Dynamic, the method returns null.</returns>
            <remarks>The purpose of this method is to extract complex arrays of simple types (jagged arrays). 
            As their dimensions and "jaggedness" may be various, Value cannot convert them into a specific type.
            So, if you happen to store a jagged array of simple type in Dynamic, use this method to get your data back.</remarks>
        </member>
        <member name="M:Eloquera.Client.Value.GetAs``1">
            <summary>
            Returns the value of the dynamic property as an instance of the specific class.
            </summary>
            <typeparam name="T">The expected type of the value.</typeparam>
            <returns>The instance of the specified class if it is stored in Dynamic, or null if the property contains a different type.</returns>
            <remarks>The purpose of this method is to extract complex arrays of simple types (jagged arrays). 
            As their dimensions and "jaggedness" may be various, Value cannot convert them into a specific type.
            So, if you happen to store a jagged array of simple type in Dynamic, use this method to get your data back.</remarks>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Guid}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.DateTime}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Boolean}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Int64}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.UInt64}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.UInt32}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Byte}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.UInt16}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Decimal}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Double}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.String">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Int32}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Nullable{System.Char}">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~Eloquera.Client.Dynamic">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Int32[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.UInt32[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Int64[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.UInt64[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Byte[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.SByte[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Int16[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.UInt16[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.DateTime[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Guid[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Decimal[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Single[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Double[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Char[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.String[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Boolean[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~Eloquera.Client.Dynamic[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Value)~System.Object[]">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Guid)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.DateTime)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Double)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.String)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Int32)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.UInt32)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Int64)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.UInt64)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Boolean)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Decimal)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Byte)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.SByte)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Int16)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.UInt16)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Char)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(Eloquera.Client.Dynamic)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.op_Implicit(System.Array)~Eloquera.Client.Value">
            <summary>
            The infrastructure method. 
            </summary>
            <param name="v">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.ToString">
            <summary>
            Returns a string representations for the value.
            </summary>
            <returns>A string representing the value, or null if the value is null.</returns>
        </member>
        <member name="M:Eloquera.Client.Value.ContainsKey(System.String)">
            <summary>
            Returns true if the given key is present in the current object, false otherwise
            </summary>
            <param name="key">Key to search</param>
            <returns>true if key is present, false otherwise</returns>
        </member>
        <member name="P:Eloquera.Client.Value.Item(System.String)">
            <summary>
            Returns a value associated with a given property name.
            </summary>
            <param name="propertyName">The name of the property required.</param>
            <returns>The value associated with the property name.</returns>
        </member>
        <member name="T:Eloquera.LogicalTable.Client.LoosePseudotypes">
            <summary>
            Indicates the LDT type of the object.
            These values are used only when the data are not represented in the pure object object form (e.g., arrays or elementary types).
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.Client.LoosePseudotypes.SimpleArray">
            <summary>
            Simple array object - the type of array is encoded in the serialized data.
            These arrays contain elemetary types and strings, and can be multidimensional and jagged.
            </summary>
        </member>
        <member name="T:Eloquera.Client.QueryProvider">
            <summary>
            Defines methods to create and execute LINQ queries over a database.
            </summary>
        </member>
        <member name="M:Eloquera.Client.QueryProvider.#ctor">
            <summary>
            Initializes a new instance of the descendant of the QueryProvider class.
            </summary>
        </member>
        <member name="T:Eloquera.Client.LinqServices">
            <summary>
            LINQ support infrastructure class.
            </summary>
        </member>
        <member name="M:Eloquera.Client.LinqServices.OrderBy``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Implementation of OrderBy supported by Eloquera Database.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.OrderBy``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Implementation of OrderBy supported by Eloquera Database. Currently is not supported.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <param name="comparer">A custom comparer for the key type.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.ThenBy``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Implementation of OrderBy supported by Eloquera Database.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.ThenBy``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Implementation of OrderBy supported by Eloquera Database. Currently is not supported.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <param name="comparer">A custom comparer for the key type.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.OrderByDescending``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Implementation of OrderBy (descending order) supported by Eloquera Database.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.OrderByDescending``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Implementation of OrderBy (descending order) supported by Eloquera Database. Currently is not supported.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <param name="comparer">A custom comparer for the key type.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.ThenByDescending``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Implementation of OrderBy (descending order) supported by Eloquera Database.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.ThenByDescending``2(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Implementation of OrderBy (descending order) supported by Eloquera Database. Currently is not supported.
            </summary>
            <typeparam name="TSource">Eloquera database query object.</typeparam>
            <typeparam name="TKey">Data type to sort against.</typeparam>
            <param name="source">A data sequence to sort.</param>
            <param name="keySelector">A function extracting a key (to sort against) from the element.</param>
            <param name="comparer">A custom comparer for the key type.</param>
            <returns>An ordered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Where``1(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">Eloquera database query object.</param>
            <param name="expression">A function to test each element for a condition.</param>
            <returns>A filtered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Where``1(Eloquera.Client.Query{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">Eloquera database query object.</param>
            <param name="expression">A function to test each element for a condition.</param>
            <returns>A filtered set of objects from the Eloquera database specified by the provider.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Join``4(Eloquera.Client.Query{``0},Eloquera.Client.Query{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Reserved for internal use. Do not use now.
            </summary>
            <typeparam name="TOuter"></typeparam>
            <typeparam name="TInner"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="outer"></param>
            <param name="inner"></param>
            <param name="outerKeySelector"></param>
            <param name="innerKeySelector"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Take``1(Eloquera.Client.Query{``0},System.Int32)">
            <summary>
            Returns a specified number of objects from the start of a sequence returned by a query. 
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">Query generating a result set.</param>
            <param name="count">The number of objects to return.</param>
            <returns>The query passed in.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Skip``1(Eloquera.Client.Query{``0},System.Int32)">
            <summary>
            Bypasses a specified number of objects in a query result and then returns the remaining objects.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Query instance from the database.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>The Query object from the database.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Distinct``1(Eloquera.Client.Query{``0},System.String)">
            <summary>
            Returns distinct elements from a query result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Query instance from the database.</param>
            <param name="propertyName">The property name whose distinct values are to be returned.</param>
            <returns>The Query instance from the database.</returns>
        </member>
        <member name="M:Eloquera.Client.LinqServices.Count``1(Eloquera.Client.Query{``0})">
            <summary>
            Returns a number of objects (on the top level) returned by the query.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Query instance from the database.</param>
            <returns>A number of objects (on the top level) returned by the query.</returns>
        </member>
        <member name="T:Eloquera.Client.Query`1">
            <summary>
            Provides a set of methods for querying the Eloquera databases.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Eloquera.Client.Query`1.#ctor(Eloquera.Client.QueryProvider)">
            <summary>
            Initializes a new instance of the Query&lt;T&gt; class and prepares it for running a query over the database.
            </summary>
            <param name="provider">The database provider to run query over.</param>
        </member>
        <member name="M:Eloquera.Client.Query`1.#ctor(Eloquera.Client.QueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the Query&lt;T&gt; class and prepares it for running a query over the database.
            </summary>
            <param name="provider">The database provider to run query over.</param>
            <param name="expression">The expression containing conditions for the query.</param>
        </member>
        <member name="M:Eloquera.Client.Query`1.GetEnumerable">
            <summary>
            This member is reserved for internal use and is not intended to be used directly from your code. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Query`1.GetEnumerator">
            <summary>
            This member is reserved for internal use and is not intended to be used directly from your code. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Query`1.GetCount">
            <summary>
            This member is reserved for internal use and is not intended to be used directly from your code. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Query`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            This member is reserved for internal use and is not intended to be used directly from your code. 
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="selector"></param>
            <param name="comparer"></param>
            <param name="descending"></param>
            <returns></returns>
        </member>
        <member name="T:Eloquera.Client.INotification">
            <summary>
            This interface provides a way to communicate for a server and a client.
            </summary>
        </member>
        <member name="P:Eloquera.Client.INotification.OnStoreEvent">
            <summary>
            This delegate is called on Store event.
            </summary>
        </member>
        <member name="P:Eloquera.Client.INotification.OnDeleteEvent">
            <summary>
            This delegate is called on Delete event.
            </summary>
        </member>
        <member name="T:Eloquera.Client.EloqueraEventArgs">
            <summary>
            The class for passing Eloquera-specific parameters to the events.
            </summary>
        </member>
        <member name="T:Eloquera.Client.EloqueraEventHandler">
            <summary>
            The delegate for basic notifications in Eloquera database.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Additional information regarding the event.</param>
        </member>
        <member name="T:Eloquera.Client.ServerEventType">
            <summary>
            Indicate different event types available for the notification engine.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Notification">
            <summary>
            This class implements basic functionality for events.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Notification.CallOnStore(System.Object,Eloquera.Client.EloqueraEventArgs)">
            <summary>
            This method calls OnStore event. As the event handlers may appear at different modules of the application, 
            re-wiring event calls allows avoiding the 'assembly not loaded' error.
            </summary>
            <param name="sender">The message sender, not used. Is required to match the delegate.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Eloquera.Client.Notification.#ctor(System.Object)">
            <summary>
            Creates an instance of Notification class, and initializes the parent object (used as a sender in the events.)
            </summary>
            <param name="parent">DB object expected, although can be everything else.</param>
        </member>
        <member name="M:Eloquera.Client.Notification.#ctor">
            <summary>
            Creates an instance of Notification class. Initializes its public event handler.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Notification.OnStoreEvent">
            <summary>
            This event is published on the server.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Notification.Item(Eloquera.Client.ServerEventType)">
            <summary>
            Allows to get or set a specific event handler from a single point of access.
            </summary>
            <param name="eventType">Event type to set or get.</param>
            <returns>The handler of the specific event type.</returns>
        </member>
        <member name="T:Eloquera.LogicalTable.MemoryStrategy">
            <summary>
            This enumeration helps to set up the optimal memory strategy for each application. To set the value up, see <code>DB.SetMemoryStrategy()</code> function.
            
            The default value is <code>WebOrientedStrategy.</code>
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.MemoryStrategy.WebOrientedStrategy">
            <summary>
            This flag indicates that the application creates a number of short-living objects. 
            This strategy is suitable for most small desktop and almost all web applications.
            </summary>
        </member>
        <member name="F:Eloquera.LogicalTable.MemoryStrategy.DesktopOrientedStrategy">
            <summary>
            This strategy is useful when the applications creates a big number of long-live objects 
            (e.g., hundreds of thousand or millions of objects stored in the list or array).
            Normally, such applications include data-analysis applications, etc.
            </summary>
        </member>
        <member name="T:Eloquera.LogicalTable.ObjectWeakStorage">
            <summary>
            This container class stores the weak references to the objects, allowing the GC cleaning up the dead objects as required.
            It also stores a unique identifier for each object (although, the container doesn't check the number for uniqueness).
            </summary>
        </member>
        <member name="M:Eloquera.LogicalTable.ObjectWeakStorage.GetObjectHashCode(System.Object)">
            <summary>
            Returns a .NET hash code for the specified object.
            
            Uses the standard Object.GetHashCode method as the first attempt. 
            If GetHashCode throws an exception, the hash code for the assembly-specified type name is returned.
            </summary>
            <param name="obj">Object needed a hash code generated.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:Eloquera.LogicalTable.ObjectWeakStorage.ObjList.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified position
            </summary>
            <param name="pos"></param>
        </member>
        <member name="T:Eloquera.Client.Parameter">
            <summary>
            Represents a parameter to the query methods in the DB class.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Parameters">
            <summary>
            Represents a collection of parameters for query methods in the DB class.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Parameters.Add(System.String)">
            <summary>
            Adds a new parameter to the parameter collection.
            </summary>
            <param name="name">A name of the parameter. Should be unique within the collection.</param>
            <returns>A newly created parameter with the specific name.</returns>
        </member>
        <member name="M:Eloquera.Client.Parameters.SetList(System.String,System.Array)">
            <summary>
            Currently there is no other way to add a list of values as a parameter, except using this method. 
            Assigning the parameter value will be treated as object parameter, not a list parameter.
            </summary>
            <param name="name"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Parameters.AddList(System.String,System.Array)">
            <summary>
            Currently there is no other way to add a list of values as a parameter, except using this method. 
            Assigning the parameter value will be treated as object parameter, not a list parameter.
            </summary>
            <param name="name"></param>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Parameters.Delete(System.String)">
            <summary>
            Deletes the parameter with the specified name from the collection.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Eloquera.Client.Parameters.ContainsParameter(System.String)">
            <summary>
            Determines if the collection contains a parameter with the specified name.
            </summary>
            <param name="name">The name of the parameter requested.</param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.Parameters.GetUid(System.String)">
            <summary>
            Returns UID for the specified name. Does not check if the parameter with the specified name exists in the collection.
            </summary>
            <param name="name">Name of the object parameter.</param>
            <returns>UID for the object parameter, 0 for all other types of parameter.</returns>
        </member>
        <member name="M:Eloquera.Client.Parameters.DeleteAll">
            <summary>
            Removes all existing parameters from the collection.
            </summary>
        </member>
        <member name="M:Eloquera.Client.Parameters.#ctor(System.Byte[][])">
            <summary>
            Creates an instance of Parameters class from the serialized representation.
            </summary>
            <param name="serializedData">Serialized data of Parameters.</param>
        </member>
        <member name="P:Eloquera.Client.Parameters.Item(System.String)">
            <summary>
            The easiest way to add a parameter is to assign it using this property.
            </summary>
            <param name="name">Name of the parameter.</param>
            <returns>The value of parameter.</returns>
        </member>
        <member name="T:Eloquera.Common.ServerConfig">
            <summary>
            Represents the Eloquera DB configuration.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerConfig.CacheConfig">
            <summary>
            Represents current cache configuration.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerConfig.ServerSettings">
            <summary>
            Represents server settings.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerConfig.RuntimeSettings">
            <summary>
            Represents current runtime-specific settings.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerConfig.UserSecuritySettings">
            <summary>
            Represents current user security settings.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerConfig.IsTestEnvironment">
            <summary>
            Indicates whether the database runs in the test mode. In test mode the database purges all static fields like Accessors.
            Works only in the (local) mode; can be set programmatically only.
            </summary>
        </member>
        <member name="T:Eloquera.Common.CacheConfig">
            <summary>
            This is a class that contains the parameters required by the cache manager.
            </summary>
        </member>
        <member name="M:Eloquera.Common.CacheConfig.#ctor">
            <summary>
            Creates an instance of CacheConfig class.
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.DataCache">
            <summary>
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.IndexCache">
            <summary>
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.MemoryFootPrint">
            <summary>
            Amount of memory allowed for the cache to use.
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.IndexCleanerPeriod">
            <summary>
            Sets how often the cache cleaner runs.
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.IndexCacheSize">
            <summary>
            Amount of memory to be used by each index.
            </summary>
        </member>
        <member name="P:Eloquera.Common.CacheConfig.WriteThruConfigured">
            <summary>
            Turns on/off the cache's write-through functionality. 
            When set to true, the cache will write all changes immediately to the disk. 
            This improves reliability sacrificing writing performance.
            </summary>
        </member>
        <member name="T:Eloquera.Common.ServerSettings">
            <summary>
            Represents the Eloquera DB server settings.
            </summary>
        </member>
        <member name="M:Eloquera.Common.ServerSettings.#ctor">
            <summary>
            Creates an instance of the ServerSettings class.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.ServerPort">
            <summary>
            Defines the TCP port the server should listen on. Changing this value lets to create multiple instances of Eloquera on the same machine.
            Must be <c>int</c> no more than 65535, and the port should be free, i.e., without conflicts with any other application working on the same port.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.DatabasePath">
            <summary>
            Indicates the path to database files.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.IpAddress">
            <summary>
            Represents the semicolon separated list of IP addresses for the server to listen at.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.SNMPAddress">
            <summary>
            Database snmp address.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.IncrementalDatabaseSize">
            <summary>
            Size of database increment. (mb)
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.InitialDatabaseSize">
            <summary>
            Initialz database size. (mb)
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.AutoRecovery">
            <summary>
            Attempt auto-recover database if corruption is suspected
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.NotificationsEnabled">
            <summary>
            A flag to enable or disable callback functionality.
            Notifies on any changes during the store
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.StoredProceduresPath">
            <summary>
            Represents the semicolon separated list of directories where Stored Procedures dll shall be searched.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.Secure">
            <summary>
            Enables the secure communication between the client and the server when true.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.AllowGroups">
            <summary>
            Indicates the semicolon separated list of Windows groups, which are allowed to connect to the Eloquera database server.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.AllowUsers">
            <summary>
            Indicates the semicolon separated list of Windows users, which are allowed to connect to the Eloquera database server.
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.VarSectorSize">
            <summary>
            Variable sector to store variable size types, like string.
            Default is 256 bytes
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.IndexNodeSize">
            <summary>
            Index tree node size (amount of keys per node)
            Default is 64
            </summary>
        </member>
        <member name="P:Eloquera.Common.ServerSettings.InMemoryAllowed">
            <summary>
            Indicates if the memory databases are allowed on the server.
            </summary>
        </member>
        <member name="T:Eloquera.Common.RuntimeSettings">
            <summary>
            Represents runtime settings for the Eloquera DB server.
            </summary>
        </member>
        <member name="M:Eloquera.Common.RuntimeSettings.#ctor">
            <summary>
            Creates an instance of the RuntimeSettings class.
            </summary>
        </member>
        <member name="P:Eloquera.Common.RuntimeSettings.Smart">
            <summary>
            Enables deeper query optimization when set to true.
            </summary>
        </member>
        <member name="P:Eloquera.Common.RuntimeSettings.TypeUpdateAllowed">
            <summary>
            Indicates whether the database can automatically update types and convert the corresponding data 
            when the type changed.
            </summary>
        </member>
        <member name="T:Eloquera.Common.UserSecuritySettings">
            <summary>
            Represents the database-based security settings for the Eloquera DB server.
            </summary>
        </member>
        <member name="M:Eloquera.Common.UserSecuritySettings.#ctor">
            <summary>
            Creates an instance of the UserSecuritySettings class.
            </summary>
        </member>
        <member name="P:Eloquera.Common.UserSecuritySettings.Enabled">
            <summary>
            Indicates whether the database authentication is enabled. If false, the Windows authentication is used.
            </summary>
        </member>
        <member name="P:Eloquera.Common.UserSecuritySettings.PasswordHash">
            <summary>
            Contains a hash of the user name and the password. 
            </summary>
        </member>
        <member name="T:Eloquera.Client.StoredProcedure">
            <summary>
            Base class for Eloquera Stored Procedures functionality.
            </summary>
        </member>
        <member name="P:Eloquera.Client.StoredProcedure.db">
            <summary>
            Server side database context.
            </summary>
        </member>
        <member name="T:Eloquera.Client.Text">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ArrayIsNull">
            <summary>
              Looks up a localized string similar to Array is null.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ArrayMustBeAnArrayOfElementaryTypesOrStrings">
            <summary>
              Looks up a localized string similar to Array must be an array of elementary types or strings..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.AuthenticationFailed">
            <summary>
              Looks up a localized string similar to Authentication failed.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.CannotFindSpecifiedType">
            <summary>
              Looks up a localized string similar to Can&apos;t find type {0}..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.CannotResolveObjectStateAsTheResolverIsNotAvailable">
            <summary>
              Looks up a localized string similar to Cannot resolve object state as the resolver is not available.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.CannotUpdate">
            <summary>
              Looks up a localized string similar to Object removed externally, cannot update.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.DatabaseIsNotOpen">
            <summary>
              Looks up a localized string similar to Database is not open.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.DefinitionInDatabaseIsDifferentToOneOnTheClient">
            <summary>
              Looks up a localized string similar to Definition in database is different to one on the client..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.FieldEmpty">
            <summary>
              Looks up a localized string similar to Empty string cannot be a field name.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.FieldNull">
            <summary>
              Looks up a localized string similar to NULL cannot be a field name.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.FieldNumber">
            <summary>
              Looks up a localized string similar to Number cannot be a field name.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.InconsistentDataToRestoreAParametersObject">
            <summary>
              Looks up a localized string similar to Inconsistent data to restore a Parameters object.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.InvalidValueForFixedDataParameter">
            <summary>
              Looks up a localized string similar to Invalid value for fixedData parameter..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.KeyAlreadyExists">
            <summary>
              Looks up a localized string similar to Key already exists..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.NameIsNull">
            <summary>
              Looks up a localized string similar to Name is null.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.NameOrTypeOfParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to Name or type of parameter cannot be null.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.NoDatabaseIsOpen">
            <summary>
              Looks up a localized string similar to No database is open.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.NotConnectedToTheServer">
            <summary>
              Looks up a localized string similar to Not connected to the server..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.NullException">
            <summary>
              Looks up a localized string similar to Internal Error: Null exception.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ObjectDoesNotOriginateFromTheDatabase">
            <summary>
              Looks up a localized string similar to Object does not originate from the database..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ObjectWithUID0IsNotOfType1">
            <summary>
              Looks up a localized string similar to Object with UID = {0} is not of type {1}.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.Parameter0IsAlreadyInTheList">
            <summary>
              Looks up a localized string similar to Parameter {0} is already in the list.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ParameterNameCannotBeNull">
            <summary>
              Looks up a localized string similar to Parameter name cannot be null.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ParameterValueIsAnObjectThatDoesnTOriginateFromDatabase">
            <summary>
              Looks up a localized string similar to Parameter value is an object that doesn&apos;t originate from database.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ProhibitedSymbols">
            <summary>
              Looks up a localized string similar to Property name has a prohibited symbol(s).
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.ServerNotificationsAreDisabled">
            <summary>
              Looks up a localized string similar to Server side notifications are disabled..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TheConnectionStringHasAnUnexpectedParameter">
            <summary>
              Looks up a localized string similar to The connection string has an unexpected parameter .
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TheConnectionStringHasIncorrectlySpecifiedServerName">
            <summary>
              Looks up a localized string similar to The connection string has incorrectly specified server name..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TheConnectionStringHasInvalidSyntax">
            <summary>
              Looks up a localized string similar to The connection string has invalid syntax..
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TheConnectionToTheServer0OnThePort1CannotBeEstablished2">
             <summary>
               Looks up a localized string similar to The connection to the server {0} on the port {1} cannot be established.
            
            {2}.
             </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TheParameterNameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The parameter &apos;name&apos; cannot be null or empty.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TypeDefinitionDataIncompatibleFormat">
            <summary>
              Looks up a localized string similar to Type definition data has got incompatible format.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.TypeMismatchExpected0actual1">
            <summary>
              Looks up a localized string similar to Type mismatch. Expected {0} actual {1}.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.UIDIsReservedForUseWithLINQQueries">
            <summary>
              Looks up a localized string similar to UID is reserved for use inside LINQ queries.
            </summary>
        </member>
        <member name="P:Eloquera.Client.Text.UnsupportedServerSideFunction">
            <summary>
              Looks up a localized string similar to Server side functions are not supported..
            </summary>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.SerializeDelegate">
            <summary>
            The delegate allows accessing the fields of the object and converts them into the byte stream, effectively serializing the object.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <param name="arr">The array for the fixed part of the serialization stream.</param>
            <param name="varr">The array for the variable length parts of the stream.</param>
            <param name="refs">The array of objects the serialized object contains references to. 
            This array contains the references to all internal objects (except strings) within the original object.</param>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.DeserializeDelegate">
            <summary>
            The delegate deserializes the object from its binary respresentation. The information passed to the delegate, doesn't contain
            the metadata (i.e., information about the type and the internal structure of the object), so, there's one deserializer per type.
            </summary>
            <param name="arr">The serialized representation of the fixed part of the object.</param>
            <param name="varr">The serialized representation of the variable part of the object.</param>
            <returns>A newly created object of the specific type.</returns>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.PostDeserializeDelegate">
            <summary>
            The delegate fills up the missing object references within the provided object, using the childObj array.
            The order of elements in childObj should match the order of objects in the ObjectMap array returned by SerializeDelegate.
            </summary>
            <param name="obj">Object to be completed.</param>
            <param name="childObj">The array of child objects (i.e. objects referenced by <c>obj</c> fields. The number of elements in this array may be less than <c>Complexity</c>
            as the object properties are not restored, only object fields are.</param>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.SerializationHost">
            <summary>
            This class only used as a host for the deserialization and post-deserialization methods,
            allowing them to modify values of read-only (initonly) fields.
            </summary>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.ObjectAccessor">
            <summary>
            Provides a service for accessing fields of any type of the object.
            Also has the functionality for serializing and restoring the object instances to/from a byte stream.
            </summary>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.Accessors">
            <summary>
            Stores all serialize/deserialize methods.
            </summary>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.pType">
            <summary>
            Stores a type information
            </summary>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.pCastFunctions">
            <summary>
            A table of types and corresponding casting into the bytes functions.
            </summary>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.pStringCaster">
            <summary>
            A pointer to the string serialization function.
            </summary>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.pStringUncaster">
            <summary>
            The pointer to the function to restore the string from the byte array.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.InitCastMethodDictionary">
            <summary>
            A static method fills up the required collections like the cast function list.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.#ctor">
            <summary>
            Creates a newly initialized ObjectAccessor object. Called once per DB (initializes the Accessors list with an empty set).
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.GetTypeAccessor(System.Type,Eloquera.Client.TypeDefinitions,Eloquera.Common.LogicalTable.ObjectAccessor.ObjectAccessorList)">
            <summary>
            Parses the structure of the type passed into the constructor
            and creates a proper accessor set for the instances of the type.
            
            This constructor should store all information about the fields and the properties along with their attributes.
            The properties are not stored, though they can be used for indexing.
            
            The common example of the indexed property instead of the indexed field is the indexing of any text (like a document or a web page).
            Normally, the document or the web page is stored as a long string contains all required text and formatting tags, although for indexing 
            the document should be split into the separate words. So, one can use a field (and property) to store a whole text block, and also create 
            a property that splits the text into separate words on the fly, without storing them as an array of strings (e.g., using String.Split() function).
            </summary>
            <param name="type">The type of the objects this object should serve.</param>
            <param name="typeDefinitions"></param>
            <param name="accessors"></param>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.CreateSerializer(System.Int32@)">
            <summary>
            Creates a dynamic method that converts an object (of type specified in the constructor) into the serialized stream of bytes.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.InsertElementaryCastToBytesBlock(System.Reflection.Emit.ILGenerator,Eloquera.Common.LogicalTable.MemberInfoExt,System.Boolean,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            A method generating an IL code for converting a field or a property value into a byte strem 
            and writing the byte stream at the specific place in the output fixed array.
            </summary>
            <param name="ilGen">IL code generator instance.</param>
            <param name="mi">Member (field or property) data for a field or a property accessed and serialized.</param>
            <param name="isProperty">Indicating if the member is a property, not a field.</param>
            <param name="isClass">Indicating the type is the class, not a structure.</param>
            <param name="castMethod">The specific method for converting a data of the field or a property into a byte stream.</param>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.InsertStringCastToBytesBlock(System.Reflection.Emit.ILGenerator,Eloquera.Common.LogicalTable.MemberInfoExt,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Inserts a block of IL to process string fields or properties within a class or a structure.
            </summary>
            <param name="ilGen">IL code generator instance.</param>
            <param name="mi">Member (field or property) data for a field or a property accessed and serialized.</param>
            <param name="isProperty">Indicating if the member is a property, not a field.</param>
            <param name="isClass">Indicating the type is the class, not a structure.</param>
            <param name="positionWithinVarData">Indicates the position of the byte stream (created for a string value) within varData array.</param>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.CreateDeserializer">
            <summary>
            Creates a deserialization function for the specific class.
            </summary>
            <returns>A delegate pointing to the deserialization function.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.CreatePostdeserializer">
            <summary>
            Creates a post-deserialization method and returns it as a delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.SerializeString(System.Object,System.Byte[],System.Byte[][],System.Object[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="arr"></param>
            <param name="varr"></param>
            <param name="objRefNotUsed"></param>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.GetClientTypeInfo(Eloquera.Common.LogicalTable.ObjectAccessor.ObjectAccessorList,Eloquera.Common.LogicalTable.TypeParser)">
            <summary>
            Collects the information required for creating the physical tables on the server side.
            </summary>
            <returns>The ClientTypeInfo class instance with the information required by CreateTable and CreateIndex functions.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.GetShortNameForGeneric(System.Type,System.Boolean)">
            <summary>
            Returns a short name for the generic types, including types derived from generic types.
            </summary>
            <param name="genType">The type to get its short name.</param>
            <param name="getShortestName">Shows if we need the shortest possible name, or we are fine with full names of types.
            Required by generics to show FullType&lt;FullTemlateType&gt; format.</param>
            <returns>The short name for the generic type.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.ObjectAccessor.GetLdtFormForSimpleType(System.Object,System.Type,System.Byte[]@,System.Byte[][]@,System.Object[]@)">
            <summary>
            Creates a serialiazed representation of object of simple type, suitable for storing in LDT.
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <param name="fixedData"></param>
            <param name="varData"></param>
            <param name="objList"></param>
        </member>
        <member name="F:Eloquera.Common.LogicalTable.ObjectAccessor.ObjectAccessorList.typeDefinitions">
            <summary>
            Contains the type management rules for passing to TypeParser as required.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.ObjectAccessor.ObjectAccessorList.Item(System.Type[])">
            <summary>
            Returns a list of object accessors for the provided list of types.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.MemberInfoExt">
            <summary>
            This class incorporates the PropertyInfo and FieldInfo class instances.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.MemberInfoExt.#ctor(System.String)">
            <summary>
            Restores the MemberInfoExt object from its "serialized" form.
            
            Note that this constructor doesn't restore the Type property. Instead, the TypeName property is set.
            It is done because the client type may not exist on the server (and vice versa), and creation of the type will end up with an exception.
            </summary>
            <param name="memberInfoSerialized"></param>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.MemberInfoExt.System#Collections#Generic#IComparer{Eloquera#Common#LogicalTable#MemberInfoExt}#Compare(Eloquera.Common.LogicalTable.MemberInfoExt,Eloquera.Common.LogicalTable.MemberInfoExt)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.MemberInfoExt.System#Collections#Generic#IComparer{System#Type}#Compare(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.MemberInfoExt.FullName">
            <summary>
            Returns the fully qualified name of the field or the property, i.e., 'Eloquera.Test.Book.Author'.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.MemberInfoExt.TypeName">
            <summary>
            The type of the field or the property that this instance contains information about.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.MemberInfoExt.DeclaringTypeName">
            <summary>
            The information about the class, this field or property belong to.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.MemberInfoExt.IsObjectReference">
            <summary>
            Indicates whether the field represents a reference to a class instance (except string).
            </summary>
        </member>
        <member name="T:Eloquera.Common.LogicalTable.TypeParser">
            <summary>
            Parses the type information and represents it in a 'portable' way that allows passing the type information across the application domains.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.TypeParser.Parents">
            <summary>
            A list of the parent classes and implemented interfaces.
            </summary>
        </member>
        <member name="P:Eloquera.Common.LogicalTable.TypeParser.Complexity">
            <summary>
            Shows a number of object references in a parsed class. Does not include strings.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.#cctor">
            <summary>
            This static constructor prepares a comparison table for the types. This comparison table sets the priority order for the types.
            </summary>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.GetStateData(System.Type,Eloquera.Client.TypeDefinitions)">
            <summary>
            Collects all information about the object, required for restoring the object clone, and for identifying the object (searching).
            The method collects information about the fields and 'readable' properties, even if the latter have the underlying fields.
            Skips 'write-only' properties as the object cannot read such properties correctly.
            
            Also gathers the inheritance information about the object.
            </summary>
            <param name="type">Type we need to parse.</param>
            <param name="typeDefs">Type rules to ignore fields, etc.</param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.IsValidType(System.Type,Eloquera.Client.TypeDefinitions)">
            <summary>
            Determine whether a class member can be stored in the database.
            </summary>
            <param name="memberType">A type member to test.</param>
            <param name="typeDefs">A set of rules to ignore specific types.</param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.IsValidTypeToStore(System.Type,Eloquera.Client.TypeDefinitions)">
            <summary>
            Determines if the type can be stored in the database.
            </summary>
            <param name="memberType">The type to test.</param>
            <param name="typeDefs">Rules to ignore specific types.</param>
            <returns>True if the type is eligible to be stored in the database, and false otherwise.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.IsMemberInList(System.Reflection.MemberInfo,Eloquera.Client.TypeDefinitionCollection)">
            <summary>
            Checks whether a member of a type is in the list of type definitions.
            </summary>
            <param name="member">A type member to find.</param>
            <param name="typeDefinitionCollection">A collection of Ignore Member rules.</param>
            <returns>True if the member is found in the list, and false otherwise.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.GetMemberFromList(System.Reflection.MemberInfo,Eloquera.Client.TypeDefinitionCollection)">
            <summary>
            Returns a type rule corresponding to a class member. This method is used for determining member's type rule information like indexes, etc.
            </summary>
            <param name="member"></param>
            <param name="typeDefinitionCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.IsTypeInList(System.Type,Eloquera.Client.TypeDefinitionCollection)">
            <summary>
            Determines if the memberType is one of the types (or descendant type of) from the list of types.
            </summary>
            <param name="memberType">A type to find in the list.</param>
            <param name="typeDefinitionCollection">A list of types to search in.</param>
            <returns>True if memberType (or one of its parent types) is the list, and false otherwise.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Checks whether a type has a specific attribute associated with it.
            </summary>
            <param name="memberInfo">A type to test.</param>
            <param name="attributeType">An attributes to find.</param>
            <returns>True if the type has the specified attribute, and false otherwise.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.IsValidArrayTypeToStore(System.Type,Eloquera.Client.TypeDefinitions)">
            <summary>
            Checks if an array is of the storable type.
            </summary>
            <param name="type">Array type to test.</param>
            <param name="typeDefs">Rules to ignore certain types.</param>
            <returns>True if the array of a storeable type.</returns>
        </member>
        <member name="M:Eloquera.Common.LogicalTable.TypeParserStatic.GetFixedDataSizes(Eloquera.Common.LogicalTable.MemberInfoExt[])">
            <summary>
            Returnes an array with lengths of fixed-length data for the type.
            </summary>
            <param name="fixedData">List of fixed-length members of a type.</param>
            <returns>The array of all lengths for the fixed-length members of the type (fields, and then properties).</returns>
        </member>
        <member name="T:Eloquera.Common.DataTransferRule">
            <summary>
            Specifies a single rule for mapping a field of an orginal type into a field of the destination type.
            </summary>
            <remarks>This is a simple rule which does not consider the field types.</remarks>
        </member>
        <member name="T:Eloquera.Common.DataTransferMap">
            <summary>
            Represents a set of rules for mapping fields of one type into fields of another type.
            </summary>
        </member>
        <member name="M:Eloquera.Common.DataTransferMap.AddRule(Eloquera.Common.DataTransferRule)">
            <summary>
            Adds a rule for processing a field of the original type.
            </summary>
        </member>
        <member name="T:Eloquera.Client.TypeDefinitions">
            <summary>
            Represents the rules for storing types and their members.
            </summary>
        </member>
        <member name="F:Eloquera.Client.TypeDefinitions.hasChanged">
            <summary>
            Field shows whether any of the persisted collections has been modified.
            </summary>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIndex(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a rule to create an index for a specified field or property.
            </summary>
            <param name="typeName">A type containing a field or property to create an index for.</param>
            <param name="memberName">A field or property name to create an index for.</param>
            <param name="isCaseSensitive"></param>
            <param name="culture"></param>
            <param name="maxIndexSize"></param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIndex``1(System.Func{``0},System.Boolean)">
            <summary>
            Adds a rule to create an index for a specified field or property.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIndex``1(System.Func{``0},System.Boolean,System.Int32)">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length. </param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIndex``1(System.Func{``0},System.Boolean,System.Int32,System.String)">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length.</param>
            <param name="cultureName">Specifies string culture.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIndex``1(System.Func{``0})">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">A lambda expression returning the field or the property to be indexed.</typeparam>
            <param name="useMemberSample"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddUniqueIndex(System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a rule to create an index for a specified field or property.
            </summary>
            <param name="typeName">A type containing a field or property to create an index for.</param>
            <param name="memberName">A field or property name to create an index for.</param>
            <param name="isCaseSensitive"></param>
            <param name="culture"></param>
            <param name="maxIndexSize"></param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddUniqueIndex``1(System.Func{``0},System.Boolean)">
            <summary>
            Adds a rule to create an index for a specified field or property.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddUniqueIndex``1(System.Func{``0},System.Boolean,System.Int32)">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length. </param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddUniqueIndex``1(System.Func{``0},System.Boolean,System.Int32,System.String)">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">The type the field or the property to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the field or the property to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length.</param>
            <param name="cultureName">Specifies string culture.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddUniqueIndex``1(System.Func{``0})">
            <summary>
            Instructs the database type registration routines to create an index on a specified field or property when the type is registered.
            </summary>
            <typeparam name="T">A lambda expression returning the field or the property to be indexed.</typeparam>
            <param name="useMemberSample"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddCompoundIndex(System.String,System.String[],System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a rule to create an compound index for a specified fields or properties.
            </summary>
            <param name="typeName">A type containing a fields or properties to create an compound index for.</param>
            <param name="memberName">A fields or properties names to create an index for.</param>
            <param name="isCaseSensitive"></param>
            <param name="culture"></param>
            <param name="maxIndexSize"></param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddCompoundIndex``1(System.Boolean,System.Func{``0}[])">
            <summary>
            Adds a rule to create an compound index for a specified fields or properties.
            </summary>
            <typeparam name="T">The type the fields or the properties to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the fields or the properties to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddCompoundIndex``1(System.Boolean,System.Int32,System.Func{``0}[])">
            <summary>
            Instructs the database type registration routines to create an compound index on a specified fields or properties when the type is registered.
            </summary>
            <typeparam name="T">The type the fields or the properties to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the fields or the properties to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length. </param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddCompoundIndex``1(System.Boolean,System.Int32,System.String,System.Func{``0}[])">
            <summary>
            Instructs the database type registration routines to create an compound index on a specified fields or properties when the type is registered.
            </summary>
            <typeparam name="T">The type the fields or the properties to be indexed belong to.</typeparam>
            <param name="useMemberSample">A lambda expression returning the fields or the properties to be indexed.</param>
            <param name="isCaseSensitive">Indicates whether the index is case-sensitive. Applied to strings only.</param>
            <param name="maxIndexSize">Specifies the string index's length.</param>
            <param name="cultureName">Specifies string culture.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddCompoundIndex``1(System.Func{``0}[])">
            <summary>
            Instructs the database type registration routines to create an compound index on a specified fields or properties when the type is registered.
            </summary>
            <typeparam name="T">A lambda expression returning the field or the property to be indexed.</typeparam>
            <param name="useMemberSample"></param>
            <returns></returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.AddIDField(System.String,System.String)">
            <summary>
            Adds a rule to map an object's ID to a specified field.
            The objects ID will be written into the field by the query and will be read by the update/delete operations.
            </summary>
            <param name="memberName">A field of type long to store object's ID in. Fields of different types and properties will be ignored</param>
            <param name="typeName"></param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.IgnoreProperty``1(System.Func{``0})">
            <summary>
            Adds a rule to ignore a specified property in a type.
            </summary>
            <typeparam name="T">The type of the property. Automatically determined by the compiler.</typeparam>
            <param name="usePropertySample">The method defined as a lambda or a delegate, like <c>()=&gt;myClass.MyProperty</c>.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
            <remarks>All type definitions must be declared before the database is created, in order to be stored in the database as permanent rules.</remarks>
            <example>
            This example uses the following class definition:
            
            <code>
            public class PerformanceCalculator
            {
               public double Profit { get; set;}
               public int Months { get; set; }
               public double AverageProfit { get { return this.Profit / this.Months; } }
            }
            </code>
            
            Referring to the AverageProfit property with the uninitialized Months property will throw an exception in the test. 
            The Eloquera DB will catch this exception and store a default value for the property, although this may slow down the testing process.
            
            Use the following line in the test method to ignore the property:
            
            <code>
            PerformanceCalculator perfCalc = null;  // We need just a type definition, not an instance of the type.
            
            db.IgnoreProperty(() => perfCalc.AverageProfit);
            </code>
            </example>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.IgnoreField``1(System.Func{``0})">
            <summary>
            Adds a rule to ignore a specified field in a type.
            </summary>
            <typeparam name="T">The type of the property. Automatically determined by the compiler.</typeparam>
            <param name="useFieldSample">The method defined as a lambda or a delegate, like <c>()=&gt;myClass.MyProperty</c>.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
            <remarks>All type definitions must be declared before the database is created, in order to be stored in the database as permanent rules.
            
            Please refer to <see cref="M:Eloquera.Client.TypeDefinitions.IgnoreProperty``1(System.Func{``0})"/> method for a usage examples.
            </remarks>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.IgnoreMember(System.Type,System.String)">
            <summary>
            Adds a rule to ignore a specified field or property in a type.
            </summary>
            <param name="parentType">A type containing a member to ignore.</param>
            <param name="memberName">A field or property name to remove the index of.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.IgnoreType(System.Type)">
            <summary>
            Marks a type to be ignored. All class members of such type or of descendant types will be ignored.
            </summary>
            <param name="type">Type to ignore in class members.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.RenameMember(System.String,System.String)">
            <summary>
            Allows renaming an existing member retaining its values.
            </summary>
            <param name="memberName"></param>
            <param name="oldMemberName"></param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="M:Eloquera.Client.TypeDefinitions.SetIDField``1(System.Func{``0})">
            <summary>
            Adds a rule to map an object's ID to a specified field.
            The objects ID will be written into the field by the query and will be read by the update/delete operations.
            </summary>
            <typeparam name="T">The type of the property. Automatically determined by the compiler.</typeparam>
            <param name="useFieldSample">>A lambda expression returning the field or the property to be set as ID.</param>
            <returns>The instance of the same TypeDefinitions object in order to continue a chain of rules.</returns>
        </member>
        <member name="T:Eloquera.Client.Property">
            <summary>
            Describes available properties
            </summary>
        </member>
        <member name="F:Eloquera.Client.Property.DatabasesList">
            <summary>
            List of existing (open and closed) databases
            </summary>
        </member>
        <member name="F:Eloquera.Client.Property.TypesList">
            <summary>
            List of all registered types
            </summary>
        </member>
        <member name="F:Eloquera.Client.Property.DatabasePath">
            <summary>
            Folder where all databases are stored
            </summary>
        </member>
        <member name="T:Eloquera.Client.UserTypeInfo">
            <summary>
            Type overview
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.TypeName">
            <summary>
            Name of the current type
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.ObjectsCount">
            <summary>
            Returns amount of objects of the given type
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.CreatedAt">
            <summary>
            Time when the type was registered
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.FieldNames">
            <summary>
            List of the fields registered within the type
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.FieldTypes">
            <summary>
            Lists the types of the corresponding fields.
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeInfo.MemberInfo">
            <summary>
            Lists the fields with the information stored in the database.
            </summary>
        </member>
        <member name="T:Eloquera.Client.UserTypeMemberInfo">
            <summary>
            Contains information about the type member (a field or a property) stored in the database.
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeMemberInfo.FieldName">
            <summary>
            A name of the member.
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeMemberInfo.FieldType">
            <summary>
            Field's type name.
            </summary>
        </member>
        <member name="P:Eloquera.Client.UserTypeMemberInfo.IsIndexed">
            <summary>
            Indicates whether the field is indexed in the database.
            </summary>
        </member>
    </members>
</doc>
